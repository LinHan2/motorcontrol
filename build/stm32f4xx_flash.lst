ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_flash.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.FLASH_SetLatency,"ax",%progbits
  20              		.align	1
  21              		.global	FLASH_SetLatency
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	FLASH_SetLatency:
  27              	.LFB239:
  28              		.file 1 "Core/Src/stm32f4xx_flash.c"
   1:Core/Src/stm32f4xx_flash.c **** /**
   2:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
   3:Core/Src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:Core/Src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:Core/Src/stm32f4xx_flash.c ****   * @version V1.7.1
   6:Core/Src/stm32f4xx_flash.c ****   * @date    20-May-2016
   7:Core/Src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:Core/Src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:Core/Src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:Core/Src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:Core/Src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:Core/Src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:Core/Src/stm32f4xx_flash.c ****   *  
  14:Core/Src/stm32f4xx_flash.c ****  @verbatim    
  15:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
  16:Core/Src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
  18:Core/Src/stm32f4xx_flash.c ****     [..]                             
  19:Core/Src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:Core/Src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:Core/Src/stm32f4xx_flash.c ****    
  22:Core/Src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:Core/Src/stm32f4xx_flash.c ****           management of the following features:
  24:Core/Src/stm32f4xx_flash.c ****         (++) Set the latency
  25:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:Core/Src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:Core/Src/stm32f4xx_flash.c ****     
  29:Core/Src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
  30:Core/Src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 2


  31:Core/Src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
  32:Core/Src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:Core/Src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:Core/Src/stm32f4xx_flash.c ****     
  35:Core/Src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:Core/Src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:Core/Src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:Core/Src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:Core/Src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:Core/Src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:Core/Src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:Core/Src/stm32f4xx_flash.c ****     
  43:Core/Src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:Core/Src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:Core/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:Core/Src/stm32f4xx_flash.c ****         (++) Get flags status
  47:Core/Src/stm32f4xx_flash.c ****         (++) Clear flags
  48:Core/Src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:Core/Src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:Core/Src/stm32f4xx_flash.c ****  @endverbatim
  51:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
  52:Core/Src/stm32f4xx_flash.c ****   * @attention
  53:Core/Src/stm32f4xx_flash.c ****   *
  54:Core/Src/stm32f4xx_flash.c ****   * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
  55:Core/Src/stm32f4xx_flash.c ****   *
  56:Core/Src/stm32f4xx_flash.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:Core/Src/stm32f4xx_flash.c ****   * You may not use this file except in compliance with the License.
  58:Core/Src/stm32f4xx_flash.c ****   * You may obtain a copy of the License at:
  59:Core/Src/stm32f4xx_flash.c ****   *
  60:Core/Src/stm32f4xx_flash.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:Core/Src/stm32f4xx_flash.c ****   *
  62:Core/Src/stm32f4xx_flash.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:Core/Src/stm32f4xx_flash.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:Core/Src/stm32f4xx_flash.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:Core/Src/stm32f4xx_flash.c ****   * See the License for the specific language governing permissions and
  66:Core/Src/stm32f4xx_flash.c ****   * limitations under the License.
  67:Core/Src/stm32f4xx_flash.c ****   *
  68:Core/Src/stm32f4xx_flash.c ****   ******************************************************************************
  69:Core/Src/stm32f4xx_flash.c ****   */
  70:Core/Src/stm32f4xx_flash.c ****  
  71:Core/Src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  72:Core/Src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  73:Core/Src/stm32f4xx_flash.c ****  
  74:Core/Src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  75:Core/Src/stm32f4xx_flash.c ****   * @{
  76:Core/Src/stm32f4xx_flash.c ****   */
  77:Core/Src/stm32f4xx_flash.c ****  
  78:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  79:Core/Src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  80:Core/Src/stm32f4xx_flash.c ****   * @{
  81:Core/Src/stm32f4xx_flash.c ****   */ 
  82:Core/Src/stm32f4xx_flash.c ****  
  83:Core/Src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  84:Core/Src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  85:Core/Src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  86:Core/Src/stm32f4xx_flash.c ****  
  87:Core/Src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 3


  88:Core/Src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  89:Core/Src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  90:Core/Src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  91:Core/Src/stm32f4xx_flash.c ****  
  92:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  93:Core/Src/stm32f4xx_flash.c ****   * @{
  94:Core/Src/stm32f4xx_flash.c ****   */ 
  95:Core/Src/stm32f4xx_flash.c ****  
  96:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  97:Core/Src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  98:Core/Src/stm32f4xx_flash.c ****  *
  99:Core/Src/stm32f4xx_flash.c ****  
 100:Core/Src/stm32f4xx_flash.c **** @verbatim   
 101:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 102:Core/Src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
 103:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 104:Core/Src/stm32f4xx_flash.c ****     [..]
 105:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 106:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 107:Core/Src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 108:Core/Src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 109:Core/Src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 110:Core/Src/stm32f4xx_flash.c ****     [..]      
 111:Core/Src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 112:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 113:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 114:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 115:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 116:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 117:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 118:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 119:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 120:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 121:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 122:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 123:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 124:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 125:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 126:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 127:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 128:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 129:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 130:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 131:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 132:Core/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 133:Core/Src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 134:Core/Src/stm32f4xx_flash.c ****  
 135:Core/Src/stm32f4xx_flash.c ****     [..]      
 136:Core/Src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 137:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 138:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 139:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 140:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 141:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 142:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 143:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 144:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 4


 145:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 146:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 147:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 148:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 149:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 150:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 151:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 152:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 153:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 154:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 155:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 156:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 157:Core/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 158:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 159:Core/Src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 160:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 161:Core/Src/stm32f4xx_flash.c ****    
 162:Core/Src/stm32f4xx_flash.c ****     [..]
 163:Core/Src/stm32f4xx_flash.c ****     For STM32F401x devices
 164:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 165:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 166:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 167:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 168:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 169:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 170:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 171:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 172:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 173:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 174:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 175:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 176:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 177:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 178:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 179:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 180:Core/Src/stm32f4xx_flash.c ****  
 181:Core/Src/stm32f4xx_flash.c ****     [..]
 182:Core/Src/stm32f4xx_flash.c ****     For STM32F410xx/STM32F411xE devices
 183:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 184:Core/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 185:Core/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 186:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 187:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 188:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 189:Core/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 190:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 191:Core/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 192:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 193:Core/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 194:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 195:Core/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 196:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 197:Core/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 198:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 199:Core/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 200:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 201:Core/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 5


 202:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 203:Core/Src/stm32f4xx_flash.c ****  
 204:Core/Src/stm32f4xx_flash.c ****  [..]
 205:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:Core/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 207:Core/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 208:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 209:Core/Src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 210:Core/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 211:Core/Src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 212:Core/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 213:Core/Src/stm32f4xx_flash.c ****  
 214:Core/Src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 215:Core/Src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 216:Core/Src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 217:Core/Src/stm32f4xx_flash.c ****           [..] 
 218:Core/Src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 219:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 220:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 221:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 222:Core/Src/stm32f4xx_flash.c ****           [..]
 223:Core/Src/stm32f4xx_flash.c ****           On STM32F401x devices:
 224:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 225:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 226:Core/Src/stm32f4xx_flash.c ****           [..]  
 227:Core/Src/stm32f4xx_flash.c ****           On STM32F410xx/STM32F411xE devices:
 228:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 229:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 230:Core/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 231:Core/Src/stm32f4xx_flash.c ****  
 232:Core/Src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 233:Core/Src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 234:Core/Src/stm32f4xx_flash.c ****  
 235:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 236:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 237:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 238:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 239:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 240:Core/Src/stm32f4xx_flash.c ****       
 241:Core/Src/stm32f4xx_flash.c ****     [..]   
 242:Core/Src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 243:Core/Src/stm32f4xx_flash.c ****  
 244:Core/Src/stm32f4xx_flash.c **** @endverbatim
 245:Core/Src/stm32f4xx_flash.c ****   * @{
 246:Core/Src/stm32f4xx_flash.c ****   */
 247:Core/Src/stm32f4xx_flash.c ****  
 248:Core/Src/stm32f4xx_flash.c **** /**
 249:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 250:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 251:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 252:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 253:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 254:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 255:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 256:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 257:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
 258:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 6


 259:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
 260:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 261:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 262:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 263:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 264:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 265:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
 266:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 267:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 268:Core/Src/stm32f4xx_flash.c ****   *              
 269:Core/Src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx, STM32F401xx/411xE and STM32F412xG devices
 270:Core/Src/stm32f4xx_flash.c ****   *       this parameter can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 271:Core/Src/stm32f4xx_flash.c ****   *
 272:Core/Src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 273:Core/Src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 274:Core/Src/stm32f4xx_flash.c ****   *         
 275:Core/Src/stm32f4xx_flash.c ****   * @retval None
 276:Core/Src/stm32f4xx_flash.c ****   */
 277:Core/Src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 278:Core/Src/stm32f4xx_flash.c **** {
  29              		.loc 1 278 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 279:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 280:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 281:Core/Src/stm32f4xx_flash.c ****   
 282:Core/Src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 283:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  45              		.loc 1 283 3
  46 0008 044B     		ldr	r3, .L2
  47              		.loc 1 283 40
  48 000a 7A68     		ldr	r2, [r7, #4]
  49 000c D2B2     		uxtb	r2, r2
  50              		.loc 1 283 38
  51 000e 1A70     		strb	r2, [r3]
 284:Core/Src/stm32f4xx_flash.c **** }
  52              		.loc 1 284 1
  53 0010 00BF     		nop
  54 0012 0C37     		adds	r7, r7, #12
  55              	.LCFI3:
  56              		.cfi_def_cfa_offset 4
  57 0014 BD46     		mov	sp, r7
  58              	.LCFI4:
  59              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 7


  60              		@ sp needed
  61 0016 5DF8047B 		ldr	r7, [sp], #4
  62              	.LCFI5:
  63              		.cfi_restore 7
  64              		.cfi_def_cfa_offset 0
  65 001a 7047     		bx	lr
  66              	.L3:
  67              		.align	2
  68              	.L2:
  69 001c 003C0240 		.word	1073888256
  70              		.cfi_endproc
  71              	.LFE239:
  73              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
  74              		.align	1
  75              		.global	FLASH_PrefetchBufferCmd
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  80              	FLASH_PrefetchBufferCmd:
  81              	.LFB240:
 285:Core/Src/stm32f4xx_flash.c ****  
 286:Core/Src/stm32f4xx_flash.c **** /**
 287:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 288:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 289:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 290:Core/Src/stm32f4xx_flash.c ****   * @retval None
 291:Core/Src/stm32f4xx_flash.c ****   */
 292:Core/Src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 293:Core/Src/stm32f4xx_flash.c **** {
  82              		.loc 1 293 1
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87 0000 80B4     		push	{r7}
  88              	.LCFI6:
  89              		.cfi_def_cfa_offset 4
  90              		.cfi_offset 7, -4
  91 0002 83B0     		sub	sp, sp, #12
  92              	.LCFI7:
  93              		.cfi_def_cfa_offset 16
  94 0004 00AF     		add	r7, sp, #0
  95              	.LCFI8:
  96              		.cfi_def_cfa_register 7
  97 0006 0346     		mov	r3, r0
  98 0008 FB71     		strb	r3, [r7, #7]
 294:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 295:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 296:Core/Src/stm32f4xx_flash.c ****   
 297:Core/Src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 298:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  99              		.loc 1 298 5
 100 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 101 000c 002B     		cmp	r3, #0
 102 000e 06D0     		beq	.L5
 299:Core/Src/stm32f4xx_flash.c ****   {
 300:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 8


 103              		.loc 1 300 16
 104 0010 094B     		ldr	r3, .L8
 105 0012 1B68     		ldr	r3, [r3]
 106 0014 084A     		ldr	r2, .L8
 107 0016 43F48073 		orr	r3, r3, #256
 108 001a 1360     		str	r3, [r2]
 301:Core/Src/stm32f4xx_flash.c ****   }
 302:Core/Src/stm32f4xx_flash.c ****   else
 303:Core/Src/stm32f4xx_flash.c ****   {
 304:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 305:Core/Src/stm32f4xx_flash.c ****   }
 306:Core/Src/stm32f4xx_flash.c **** }
 109              		.loc 1 306 1
 110 001c 05E0     		b	.L7
 111              	.L5:
 304:Core/Src/stm32f4xx_flash.c ****   }
 112              		.loc 1 304 16
 113 001e 064B     		ldr	r3, .L8
 114 0020 1B68     		ldr	r3, [r3]
 115 0022 054A     		ldr	r2, .L8
 116 0024 23F48073 		bic	r3, r3, #256
 117 0028 1360     		str	r3, [r2]
 118              	.L7:
 119              		.loc 1 306 1
 120 002a 00BF     		nop
 121 002c 0C37     		adds	r7, r7, #12
 122              	.LCFI9:
 123              		.cfi_def_cfa_offset 4
 124 002e BD46     		mov	sp, r7
 125              	.LCFI10:
 126              		.cfi_def_cfa_register 13
 127              		@ sp needed
 128 0030 5DF8047B 		ldr	r7, [sp], #4
 129              	.LCFI11:
 130              		.cfi_restore 7
 131              		.cfi_def_cfa_offset 0
 132 0034 7047     		bx	lr
 133              	.L9:
 134 0036 00BF     		.align	2
 135              	.L8:
 136 0038 003C0240 		.word	1073888256
 137              		.cfi_endproc
 138              	.LFE240:
 140              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
 141              		.align	1
 142              		.global	FLASH_InstructionCacheCmd
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 147              	FLASH_InstructionCacheCmd:
 148              	.LFB241:
 307:Core/Src/stm32f4xx_flash.c ****  
 308:Core/Src/stm32f4xx_flash.c **** /**
 309:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 310:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 311:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 312:Core/Src/stm32f4xx_flash.c ****   * @retval None
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 9


 313:Core/Src/stm32f4xx_flash.c ****   */
 314:Core/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 315:Core/Src/stm32f4xx_flash.c **** {
 149              		.loc 1 315 1
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 8
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154 0000 80B4     		push	{r7}
 155              	.LCFI12:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 0002 83B0     		sub	sp, sp, #12
 159              	.LCFI13:
 160              		.cfi_def_cfa_offset 16
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI14:
 163              		.cfi_def_cfa_register 7
 164 0006 0346     		mov	r3, r0
 165 0008 FB71     		strb	r3, [r7, #7]
 316:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 317:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 318:Core/Src/stm32f4xx_flash.c ****   
 319:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 166              		.loc 1 319 5
 167 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 168 000c 002B     		cmp	r3, #0
 169 000e 06D0     		beq	.L11
 320:Core/Src/stm32f4xx_flash.c ****   {
 321:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 170              		.loc 1 321 16
 171 0010 094B     		ldr	r3, .L14
 172 0012 1B68     		ldr	r3, [r3]
 173 0014 084A     		ldr	r2, .L14
 174 0016 43F40073 		orr	r3, r3, #512
 175 001a 1360     		str	r3, [r2]
 322:Core/Src/stm32f4xx_flash.c ****   }
 323:Core/Src/stm32f4xx_flash.c ****   else
 324:Core/Src/stm32f4xx_flash.c ****   {
 325:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 326:Core/Src/stm32f4xx_flash.c ****   }
 327:Core/Src/stm32f4xx_flash.c **** }
 176              		.loc 1 327 1
 177 001c 05E0     		b	.L13
 178              	.L11:
 325:Core/Src/stm32f4xx_flash.c ****   }
 179              		.loc 1 325 16
 180 001e 064B     		ldr	r3, .L14
 181 0020 1B68     		ldr	r3, [r3]
 182 0022 054A     		ldr	r2, .L14
 183 0024 23F40073 		bic	r3, r3, #512
 184 0028 1360     		str	r3, [r2]
 185              	.L13:
 186              		.loc 1 327 1
 187 002a 00BF     		nop
 188 002c 0C37     		adds	r7, r7, #12
 189              	.LCFI15:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 10


 190              		.cfi_def_cfa_offset 4
 191 002e BD46     		mov	sp, r7
 192              	.LCFI16:
 193              		.cfi_def_cfa_register 13
 194              		@ sp needed
 195 0030 5DF8047B 		ldr	r7, [sp], #4
 196              	.LCFI17:
 197              		.cfi_restore 7
 198              		.cfi_def_cfa_offset 0
 199 0034 7047     		bx	lr
 200              	.L15:
 201 0036 00BF     		.align	2
 202              	.L14:
 203 0038 003C0240 		.word	1073888256
 204              		.cfi_endproc
 205              	.LFE241:
 207              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 208              		.align	1
 209              		.global	FLASH_DataCacheCmd
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 214              	FLASH_DataCacheCmd:
 215              	.LFB242:
 328:Core/Src/stm32f4xx_flash.c ****  
 329:Core/Src/stm32f4xx_flash.c **** /**
 330:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 331:Core/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 332:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 333:Core/Src/stm32f4xx_flash.c ****   * @retval None
 334:Core/Src/stm32f4xx_flash.c ****   */
 335:Core/Src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 336:Core/Src/stm32f4xx_flash.c **** {
 216              		.loc 1 336 1
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 8
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221 0000 80B4     		push	{r7}
 222              	.LCFI18:
 223              		.cfi_def_cfa_offset 4
 224              		.cfi_offset 7, -4
 225 0002 83B0     		sub	sp, sp, #12
 226              	.LCFI19:
 227              		.cfi_def_cfa_offset 16
 228 0004 00AF     		add	r7, sp, #0
 229              	.LCFI20:
 230              		.cfi_def_cfa_register 7
 231 0006 0346     		mov	r3, r0
 232 0008 FB71     		strb	r3, [r7, #7]
 337:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 338:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 339:Core/Src/stm32f4xx_flash.c ****   
 340:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 233              		.loc 1 340 5
 234 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 235 000c 002B     		cmp	r3, #0
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 11


 236 000e 06D0     		beq	.L17
 341:Core/Src/stm32f4xx_flash.c ****   {
 342:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 237              		.loc 1 342 16
 238 0010 094B     		ldr	r3, .L20
 239 0012 1B68     		ldr	r3, [r3]
 240 0014 084A     		ldr	r2, .L20
 241 0016 43F48063 		orr	r3, r3, #1024
 242 001a 1360     		str	r3, [r2]
 343:Core/Src/stm32f4xx_flash.c ****   }
 344:Core/Src/stm32f4xx_flash.c ****   else
 345:Core/Src/stm32f4xx_flash.c ****   {
 346:Core/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 347:Core/Src/stm32f4xx_flash.c ****   }
 348:Core/Src/stm32f4xx_flash.c **** }
 243              		.loc 1 348 1
 244 001c 05E0     		b	.L19
 245              	.L17:
 346:Core/Src/stm32f4xx_flash.c ****   }
 246              		.loc 1 346 16
 247 001e 064B     		ldr	r3, .L20
 248 0020 1B68     		ldr	r3, [r3]
 249 0022 054A     		ldr	r2, .L20
 250 0024 23F48063 		bic	r3, r3, #1024
 251 0028 1360     		str	r3, [r2]
 252              	.L19:
 253              		.loc 1 348 1
 254 002a 00BF     		nop
 255 002c 0C37     		adds	r7, r7, #12
 256              	.LCFI21:
 257              		.cfi_def_cfa_offset 4
 258 002e BD46     		mov	sp, r7
 259              	.LCFI22:
 260              		.cfi_def_cfa_register 13
 261              		@ sp needed
 262 0030 5DF8047B 		ldr	r7, [sp], #4
 263              	.LCFI23:
 264              		.cfi_restore 7
 265              		.cfi_def_cfa_offset 0
 266 0034 7047     		bx	lr
 267              	.L21:
 268 0036 00BF     		.align	2
 269              	.L20:
 270 0038 003C0240 		.word	1073888256
 271              		.cfi_endproc
 272              	.LFE242:
 274              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 275              		.align	1
 276              		.global	FLASH_InstructionCacheReset
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 281              	FLASH_InstructionCacheReset:
 282              	.LFB243:
 349:Core/Src/stm32f4xx_flash.c ****  
 350:Core/Src/stm32f4xx_flash.c **** /**
 351:Core/Src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 12


 352:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 353:Core/Src/stm32f4xx_flash.c ****   * @param  None
 354:Core/Src/stm32f4xx_flash.c ****   * @retval None
 355:Core/Src/stm32f4xx_flash.c ****   */
 356:Core/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 357:Core/Src/stm32f4xx_flash.c **** {
 283              		.loc 1 357 1
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288 0000 80B4     		push	{r7}
 289              	.LCFI24:
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 7, -4
 292 0002 00AF     		add	r7, sp, #0
 293              	.LCFI25:
 294              		.cfi_def_cfa_register 7
 358:Core/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 295              		.loc 1 358 14
 296 0004 054B     		ldr	r3, .L23
 297 0006 1B68     		ldr	r3, [r3]
 298 0008 044A     		ldr	r2, .L23
 299 000a 43F40063 		orr	r3, r3, #2048
 300 000e 1360     		str	r3, [r2]
 359:Core/Src/stm32f4xx_flash.c **** }
 301              		.loc 1 359 1
 302 0010 00BF     		nop
 303 0012 BD46     		mov	sp, r7
 304              	.LCFI26:
 305              		.cfi_def_cfa_register 13
 306              		@ sp needed
 307 0014 5DF8047B 		ldr	r7, [sp], #4
 308              	.LCFI27:
 309              		.cfi_restore 7
 310              		.cfi_def_cfa_offset 0
 311 0018 7047     		bx	lr
 312              	.L24:
 313 001a 00BF     		.align	2
 314              	.L23:
 315 001c 003C0240 		.word	1073888256
 316              		.cfi_endproc
 317              	.LFE243:
 319              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 320              		.align	1
 321              		.global	FLASH_DataCacheReset
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 326              	FLASH_DataCacheReset:
 327              	.LFB244:
 360:Core/Src/stm32f4xx_flash.c ****  
 361:Core/Src/stm32f4xx_flash.c **** /**
 362:Core/Src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 363:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 364:Core/Src/stm32f4xx_flash.c ****   * @param  None
 365:Core/Src/stm32f4xx_flash.c ****   * @retval None
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 13


 366:Core/Src/stm32f4xx_flash.c ****   */
 367:Core/Src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 368:Core/Src/stm32f4xx_flash.c **** {
 328              		.loc 1 368 1
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 1, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333 0000 80B4     		push	{r7}
 334              	.LCFI28:
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0002 00AF     		add	r7, sp, #0
 338              	.LCFI29:
 339              		.cfi_def_cfa_register 7
 369:Core/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 340              		.loc 1 369 14
 341 0004 054B     		ldr	r3, .L26
 342 0006 1B68     		ldr	r3, [r3]
 343 0008 044A     		ldr	r2, .L26
 344 000a 43F48053 		orr	r3, r3, #4096
 345 000e 1360     		str	r3, [r2]
 370:Core/Src/stm32f4xx_flash.c **** }
 346              		.loc 1 370 1
 347 0010 00BF     		nop
 348 0012 BD46     		mov	sp, r7
 349              	.LCFI30:
 350              		.cfi_def_cfa_register 13
 351              		@ sp needed
 352 0014 5DF8047B 		ldr	r7, [sp], #4
 353              	.LCFI31:
 354              		.cfi_restore 7
 355              		.cfi_def_cfa_offset 0
 356 0018 7047     		bx	lr
 357              	.L27:
 358 001a 00BF     		.align	2
 359              	.L26:
 360 001c 003C0240 		.word	1073888256
 361              		.cfi_endproc
 362              	.LFE244:
 364              		.section	.text.FLASH_Unlock,"ax",%progbits
 365              		.align	1
 366              		.global	FLASH_Unlock
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 371              	FLASH_Unlock:
 372              	.LFB245:
 371:Core/Src/stm32f4xx_flash.c ****  
 372:Core/Src/stm32f4xx_flash.c **** /**
 373:Core/Src/stm32f4xx_flash.c ****   * @}
 374:Core/Src/stm32f4xx_flash.c ****   */
 375:Core/Src/stm32f4xx_flash.c ****  
 376:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 377:Core/Src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 378:Core/Src/stm32f4xx_flash.c ****  *
 379:Core/Src/stm32f4xx_flash.c **** @verbatim   
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 14


 380:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 381:Core/Src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 382:Core/Src/stm32f4xx_flash.c ****  ===============================================================================   
 383:Core/Src/stm32f4xx_flash.c ****     [..]
 384:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 385:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 386:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 387:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 388:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 389:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 390:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 391:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 392:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 393:Core/Src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 394:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 395:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 396:Core/Src/stm32f4xx_flash.c ****     [..]   
 397:Core/Src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 398:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 399:Core/Src/stm32f4xx_flash.c ****  
 400:Core/Src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 401:Core/Src/stm32f4xx_flash.c ****  
 402:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 403:Core/Src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 404:Core/Src/stm32f4xx_flash.c ****     
 405:Core/Src/stm32f4xx_flash.c **** @endverbatim
 406:Core/Src/stm32f4xx_flash.c ****   * @{
 407:Core/Src/stm32f4xx_flash.c ****   */
 408:Core/Src/stm32f4xx_flash.c ****  
 409:Core/Src/stm32f4xx_flash.c **** /**
 410:Core/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 411:Core/Src/stm32f4xx_flash.c ****   * @param  None
 412:Core/Src/stm32f4xx_flash.c ****   * @retval None
 413:Core/Src/stm32f4xx_flash.c ****   */
 414:Core/Src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 415:Core/Src/stm32f4xx_flash.c **** {
 373              		.loc 1 415 1
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378 0000 80B4     		push	{r7}
 379              	.LCFI32:
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 0002 00AF     		add	r7, sp, #0
 383              	.LCFI33:
 384              		.cfi_def_cfa_register 7
 416:Core/Src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 385              		.loc 1 416 12
 386 0004 074B     		ldr	r3, .L31
 387 0006 1B69     		ldr	r3, [r3, #16]
 388              		.loc 1 416 5
 389 0008 002B     		cmp	r3, #0
 390 000a 05DA     		bge	.L30
 417:Core/Src/stm32f4xx_flash.c ****   {
 418:Core/Src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 15


 419:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 391              		.loc 1 419 10
 392 000c 054B     		ldr	r3, .L31
 393              		.loc 1 419 17
 394 000e 064A     		ldr	r2, .L31+4
 395 0010 5A60     		str	r2, [r3, #4]
 420:Core/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 396              		.loc 1 420 10
 397 0012 044B     		ldr	r3, .L31
 398              		.loc 1 420 17
 399 0014 054A     		ldr	r2, .L31+8
 400 0016 5A60     		str	r2, [r3, #4]
 401              	.L30:
 421:Core/Src/stm32f4xx_flash.c ****   }  
 422:Core/Src/stm32f4xx_flash.c **** }
 402              		.loc 1 422 1
 403 0018 00BF     		nop
 404 001a BD46     		mov	sp, r7
 405              	.LCFI34:
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 001c 5DF8047B 		ldr	r7, [sp], #4
 409              	.LCFI35:
 410              		.cfi_restore 7
 411              		.cfi_def_cfa_offset 0
 412 0020 7047     		bx	lr
 413              	.L32:
 414 0022 00BF     		.align	2
 415              	.L31:
 416 0024 003C0240 		.word	1073888256
 417 0028 23016745 		.word	1164378403
 418 002c AB89EFCD 		.word	-839939669
 419              		.cfi_endproc
 420              	.LFE245:
 422              		.section	.text.FLASH_Lock,"ax",%progbits
 423              		.align	1
 424              		.global	FLASH_Lock
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 429              	FLASH_Lock:
 430              	.LFB246:
 423:Core/Src/stm32f4xx_flash.c ****  
 424:Core/Src/stm32f4xx_flash.c **** /**
 425:Core/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 426:Core/Src/stm32f4xx_flash.c ****   * @param  None
 427:Core/Src/stm32f4xx_flash.c ****   * @retval None
 428:Core/Src/stm32f4xx_flash.c ****   */
 429:Core/Src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 430:Core/Src/stm32f4xx_flash.c **** {
 431              		.loc 1 430 1
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436 0000 80B4     		push	{r7}
 437              	.LCFI36:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 16


 438              		.cfi_def_cfa_offset 4
 439              		.cfi_offset 7, -4
 440 0002 00AF     		add	r7, sp, #0
 441              	.LCFI37:
 442              		.cfi_def_cfa_register 7
 431:Core/Src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 432:Core/Src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 443              		.loc 1 432 13
 444 0004 054B     		ldr	r3, .L34
 445 0006 1B69     		ldr	r3, [r3, #16]
 446 0008 044A     		ldr	r2, .L34
 447 000a 43F00043 		orr	r3, r3, #-2147483648
 448 000e 1361     		str	r3, [r2, #16]
 433:Core/Src/stm32f4xx_flash.c **** }
 449              		.loc 1 433 1
 450 0010 00BF     		nop
 451 0012 BD46     		mov	sp, r7
 452              	.LCFI38:
 453              		.cfi_def_cfa_register 13
 454              		@ sp needed
 455 0014 5DF8047B 		ldr	r7, [sp], #4
 456              	.LCFI39:
 457              		.cfi_restore 7
 458              		.cfi_def_cfa_offset 0
 459 0018 7047     		bx	lr
 460              	.L35:
 461 001a 00BF     		.align	2
 462              	.L34:
 463 001c 003C0240 		.word	1073888256
 464              		.cfi_endproc
 465              	.LFE246:
 467              		.section	.text.FLASH_EraseSector,"ax",%progbits
 468              		.align	1
 469              		.global	FLASH_EraseSector
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 474              	FLASH_EraseSector:
 475              	.LFB247:
 434:Core/Src/stm32f4xx_flash.c ****  
 435:Core/Src/stm32f4xx_flash.c **** /**
 436:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 437:Core/Src/stm32f4xx_flash.c ****   *
 438:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 439:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 440:Core/Src/stm32f4xx_flash.c ****   *
 441:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 442:Core/Src/stm32f4xx_flash.c ****   *
 443:Core/Src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 444:Core/Src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 445:Core/Src/stm32f4xx_flash.c ****   *
 446:Core/Src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 447:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 448:Core/Src/stm32f4xx_flash.c ****   *
 449:Core/Src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 450:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 451:Core/Src/stm32f4xx_flash.c ****   *
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 17


 452:Core/Src/stm32f4xx_flash.c ****   *         For STM32F411xE and STM32F412xG devices this parameter can be a value between 
 453:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 454:Core/Src/stm32f4xx_flash.c ****   *
 455:Core/Src/stm32f4xx_flash.c ****   *         For STM32F410xx devices this parameter can be a value between 
 456:Core/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_4.
 457:Core/Src/stm32f4xx_flash.c ****   *
 458:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 459:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 460:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 461:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 462:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 463:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 464:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 465:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 466:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 467:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 468:Core/Src/stm32f4xx_flash.c ****   *       
 469:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 470:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 471:Core/Src/stm32f4xx_flash.c ****   */
 472:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 473:Core/Src/stm32f4xx_flash.c **** {
 476              		.loc 1 473 1
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 16
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 80B5     		push	{r7, lr}
 481              	.LCFI40:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 7, -8
 484              		.cfi_offset 14, -4
 485 0002 84B0     		sub	sp, sp, #16
 486              	.LCFI41:
 487              		.cfi_def_cfa_offset 24
 488 0004 00AF     		add	r7, sp, #0
 489              	.LCFI42:
 490              		.cfi_def_cfa_register 7
 491 0006 7860     		str	r0, [r7, #4]
 492 0008 0B46     		mov	r3, r1
 493 000a FB70     		strb	r3, [r7, #3]
 474:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 494              		.loc 1 474 12
 495 000c 0023     		movs	r3, #0
 496 000e FB60     		str	r3, [r7, #12]
 475:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 497              		.loc 1 475 16
 498 0010 0923     		movs	r3, #9
 499 0012 FB72     		strb	r3, [r7, #11]
 476:Core/Src/stm32f4xx_flash.c ****  
 477:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 478:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 479:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 480:Core/Src/stm32f4xx_flash.c ****   
 481:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 500              		.loc 1 481 5
 501 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 502 0016 002B     		cmp	r3, #0
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 18


 503 0018 02D1     		bne	.L37
 482:Core/Src/stm32f4xx_flash.c ****   {
 483:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 504              		.loc 1 483 16
 505 001a 0023     		movs	r3, #0
 506 001c FB60     		str	r3, [r7, #12]
 507 001e 10E0     		b	.L38
 508              	.L37:
 484:Core/Src/stm32f4xx_flash.c ****   }
 485:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 509              		.loc 1 485 10
 510 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 511 0022 012B     		cmp	r3, #1
 512 0024 03D1     		bne	.L39
 486:Core/Src/stm32f4xx_flash.c ****   {
 487:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 513              		.loc 1 487 15
 514 0026 4FF48073 		mov	r3, #256
 515 002a FB60     		str	r3, [r7, #12]
 516 002c 09E0     		b	.L38
 517              	.L39:
 488:Core/Src/stm32f4xx_flash.c ****   }
 489:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 518              		.loc 1 489 10
 519 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 520 0030 022B     		cmp	r3, #2
 521 0032 03D1     		bne	.L40
 490:Core/Src/stm32f4xx_flash.c ****   {
 491:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 522              		.loc 1 491 15
 523 0034 4FF40073 		mov	r3, #512
 524 0038 FB60     		str	r3, [r7, #12]
 525 003a 02E0     		b	.L38
 526              	.L40:
 492:Core/Src/stm32f4xx_flash.c ****   }
 493:Core/Src/stm32f4xx_flash.c ****   else
 494:Core/Src/stm32f4xx_flash.c ****   {
 495:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 527              		.loc 1 495 15
 528 003c 4FF44073 		mov	r3, #768
 529 0040 FB60     		str	r3, [r7, #12]
 530              	.L38:
 496:Core/Src/stm32f4xx_flash.c ****   }
 497:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 498:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 531              		.loc 1 498 12
 532 0042 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 533 0046 0346     		mov	r3, r0
 534 0048 FB72     		strb	r3, [r7, #11]
 499:Core/Src/stm32f4xx_flash.c ****   
 500:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 535              		.loc 1 500 5
 536 004a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 537 004c 092B     		cmp	r3, #9
 538 004e 2FD1     		bne	.L41
 501:Core/Src/stm32f4xx_flash.c ****   { 
 502:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 19


 503:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 539              		.loc 1 503 15
 540 0050 1A4B     		ldr	r3, .L43
 541 0052 1B69     		ldr	r3, [r3, #16]
 542 0054 194A     		ldr	r2, .L43
 543 0056 23F44073 		bic	r3, r3, #768
 544 005a 1361     		str	r3, [r2, #16]
 504:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 545              		.loc 1 504 15
 546 005c 174B     		ldr	r3, .L43
 547 005e 1A69     		ldr	r2, [r3, #16]
 548 0060 1649     		ldr	r1, .L43
 549 0062 FB68     		ldr	r3, [r7, #12]
 550 0064 1343     		orrs	r3, r3, r2
 551 0066 0B61     		str	r3, [r1, #16]
 505:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 552              		.loc 1 505 15
 553 0068 144B     		ldr	r3, .L43
 554 006a 1B69     		ldr	r3, [r3, #16]
 555 006c 134A     		ldr	r2, .L43
 556 006e 23F0F803 		bic	r3, r3, #248
 557 0072 1361     		str	r3, [r2, #16]
 506:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 558              		.loc 1 506 15
 559 0074 114B     		ldr	r3, .L43
 560 0076 1A69     		ldr	r2, [r3, #16]
 561 0078 7B68     		ldr	r3, [r7, #4]
 562 007a 1343     		orrs	r3, r3, r2
 563 007c 0F4A     		ldr	r2, .L43
 564 007e 43F00203 		orr	r3, r3, #2
 565 0082 1361     		str	r3, [r2, #16]
 507:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 566              		.loc 1 507 15
 567 0084 0D4B     		ldr	r3, .L43
 568 0086 1B69     		ldr	r3, [r3, #16]
 569 0088 0C4A     		ldr	r2, .L43
 570 008a 43F48033 		orr	r3, r3, #65536
 571 008e 1361     		str	r3, [r2, #16]
 508:Core/Src/stm32f4xx_flash.c ****     
 509:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 510:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 572              		.loc 1 510 14
 573 0090 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 574 0094 0346     		mov	r3, r0
 575 0096 FB72     		strb	r3, [r7, #11]
 511:Core/Src/stm32f4xx_flash.c ****     
 512:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 513:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 576              		.loc 1 513 15
 577 0098 084B     		ldr	r3, .L43
 578 009a 1B69     		ldr	r3, [r3, #16]
 579 009c 074A     		ldr	r2, .L43
 580 009e 23F00203 		bic	r3, r3, #2
 581 00a2 1361     		str	r3, [r2, #16]
 514:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 582              		.loc 1 514 15
 583 00a4 054B     		ldr	r3, .L43
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 20


 584 00a6 1B69     		ldr	r3, [r3, #16]
 585 00a8 044A     		ldr	r2, .L43
 586 00aa 23F0F803 		bic	r3, r3, #248
 587 00ae 1361     		str	r3, [r2, #16]
 588              	.L41:
 515:Core/Src/stm32f4xx_flash.c ****   }
 516:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 517:Core/Src/stm32f4xx_flash.c ****   return status;
 589              		.loc 1 517 10
 590 00b0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 518:Core/Src/stm32f4xx_flash.c **** }
 591              		.loc 1 518 1
 592 00b2 1846     		mov	r0, r3
 593 00b4 1037     		adds	r7, r7, #16
 594              	.LCFI43:
 595              		.cfi_def_cfa_offset 8
 596 00b6 BD46     		mov	sp, r7
 597              	.LCFI44:
 598              		.cfi_def_cfa_register 13
 599              		@ sp needed
 600 00b8 80BD     		pop	{r7, pc}
 601              	.L44:
 602 00ba 00BF     		.align	2
 603              	.L43:
 604 00bc 003C0240 		.word	1073888256
 605              		.cfi_endproc
 606              	.LFE247:
 608              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
 609              		.align	1
 610              		.global	FLASH_EraseAllSectors
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 615              	FLASH_EraseAllSectors:
 616              	.LFB248:
 519:Core/Src/stm32f4xx_flash.c ****  
 520:Core/Src/stm32f4xx_flash.c **** /**
 521:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 522:Core/Src/stm32f4xx_flash.c ****   *
 523:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 524:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 525:Core/Src/stm32f4xx_flash.c ****   *  
 526:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 527:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 528:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 529:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 530:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 531:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 532:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 533:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 534:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 535:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 536:Core/Src/stm32f4xx_flash.c ****   *       
 537:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 538:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 539:Core/Src/stm32f4xx_flash.c ****   */
 540:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 21


 541:Core/Src/stm32f4xx_flash.c **** {
 617              		.loc 1 541 1
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 16
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              	.LCFI45:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 84B0     		sub	sp, sp, #16
 627              	.LCFI46:
 628              		.cfi_def_cfa_offset 24
 629 0004 00AF     		add	r7, sp, #0
 630              	.LCFI47:
 631              		.cfi_def_cfa_register 7
 632 0006 0346     		mov	r3, r0
 633 0008 FB71     		strb	r3, [r7, #7]
 542:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 634              		.loc 1 542 12
 635 000a 0023     		movs	r3, #0
 636 000c FB60     		str	r3, [r7, #12]
 543:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 637              		.loc 1 543 16
 638 000e 0923     		movs	r3, #9
 639 0010 FB72     		strb	r3, [r7, #11]
 544:Core/Src/stm32f4xx_flash.c ****   
 545:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 546:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 640              		.loc 1 546 12
 641 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 642 0016 0346     		mov	r3, r0
 643 0018 FB72     		strb	r3, [r7, #11]
 547:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 548:Core/Src/stm32f4xx_flash.c ****   
 549:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 644              		.loc 1 549 5
 645 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 646 001c 002B     		cmp	r3, #0
 647 001e 02D1     		bne	.L46
 550:Core/Src/stm32f4xx_flash.c ****   {
 551:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 648              		.loc 1 551 16
 649 0020 0023     		movs	r3, #0
 650 0022 FB60     		str	r3, [r7, #12]
 651 0024 10E0     		b	.L47
 652              	.L46:
 552:Core/Src/stm32f4xx_flash.c ****   }
 553:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 653              		.loc 1 553 10
 654 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 655 0028 012B     		cmp	r3, #1
 656 002a 03D1     		bne	.L48
 554:Core/Src/stm32f4xx_flash.c ****   {
 555:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 657              		.loc 1 555 15
 658 002c 4FF48073 		mov	r3, #256
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 22


 659 0030 FB60     		str	r3, [r7, #12]
 660 0032 09E0     		b	.L47
 661              	.L48:
 556:Core/Src/stm32f4xx_flash.c ****   }
 557:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 662              		.loc 1 557 10
 663 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 664 0036 022B     		cmp	r3, #2
 665 0038 03D1     		bne	.L49
 558:Core/Src/stm32f4xx_flash.c ****   {
 559:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 666              		.loc 1 559 15
 667 003a 4FF40073 		mov	r3, #512
 668 003e FB60     		str	r3, [r7, #12]
 669 0040 02E0     		b	.L47
 670              	.L49:
 560:Core/Src/stm32f4xx_flash.c ****   }
 561:Core/Src/stm32f4xx_flash.c ****   else
 562:Core/Src/stm32f4xx_flash.c ****   {
 563:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 671              		.loc 1 563 15
 672 0042 4FF44073 		mov	r3, #768
 673 0046 FB60     		str	r3, [r7, #12]
 674              	.L47:
 564:Core/Src/stm32f4xx_flash.c ****   }  
 565:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 675              		.loc 1 565 5
 676 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 677 004a 092B     		cmp	r3, #9
 678 004c 21D1     		bne	.L50
 566:Core/Src/stm32f4xx_flash.c ****   {
 567:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 568:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 569:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 570:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 571:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 572:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 573:Core/Src/stm32f4xx_flash.c ****     
 574:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 575:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 576:Core/Src/stm32f4xx_flash.c ****  
 577:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 578:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 579:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
 580:Core/Src/stm32f4xx_flash.c ****  
 581:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
 582:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 679              		.loc 1 582 15
 680 004e 134B     		ldr	r3, .L52
 681 0050 1B69     		ldr	r3, [r3, #16]
 682 0052 124A     		ldr	r2, .L52
 683 0054 23F44073 		bic	r3, r3, #768
 684 0058 1361     		str	r3, [r2, #16]
 583:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 685              		.loc 1 583 15
 686 005a 104B     		ldr	r3, .L52
 687 005c 1A69     		ldr	r2, [r3, #16]
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 23


 688 005e 0F49     		ldr	r1, .L52
 689 0060 FB68     		ldr	r3, [r7, #12]
 690 0062 1343     		orrs	r3, r3, r2
 691 0064 0B61     		str	r3, [r1, #16]
 584:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 692              		.loc 1 584 15
 693 0066 0D4B     		ldr	r3, .L52
 694 0068 1B69     		ldr	r3, [r3, #16]
 695 006a 0C4A     		ldr	r2, .L52
 696 006c 43F00403 		orr	r3, r3, #4
 697 0070 1361     		str	r3, [r2, #16]
 585:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 698              		.loc 1 585 15
 699 0072 0A4B     		ldr	r3, .L52
 700 0074 1B69     		ldr	r3, [r3, #16]
 701 0076 094A     		ldr	r2, .L52
 702 0078 43F48033 		orr	r3, r3, #65536
 703 007c 1361     		str	r3, [r2, #16]
 586:Core/Src/stm32f4xx_flash.c ****     
 587:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 588:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 704              		.loc 1 588 14
 705 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 706 0082 0346     		mov	r3, r0
 707 0084 FB72     		strb	r3, [r7, #11]
 589:Core/Src/stm32f4xx_flash.c ****  
 590:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 591:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 708              		.loc 1 591 15
 709 0086 054B     		ldr	r3, .L52
 710 0088 1B69     		ldr	r3, [r3, #16]
 711 008a 044A     		ldr	r2, .L52
 712 008c 23F00403 		bic	r3, r3, #4
 713 0090 1361     		str	r3, [r2, #16]
 714              	.L50:
 592:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F446xx
 593:Core/Src/stm32f4xx_flash.c ****  
 594:Core/Src/stm32f4xx_flash.c ****   }   
 595:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 596:Core/Src/stm32f4xx_flash.c ****   return status;
 715              		.loc 1 596 10
 716 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 597:Core/Src/stm32f4xx_flash.c **** }
 717              		.loc 1 597 1
 718 0094 1846     		mov	r0, r3
 719 0096 1037     		adds	r7, r7, #16
 720              	.LCFI48:
 721              		.cfi_def_cfa_offset 8
 722 0098 BD46     		mov	sp, r7
 723              	.LCFI49:
 724              		.cfi_def_cfa_register 13
 725              		@ sp needed
 726 009a 80BD     		pop	{r7, pc}
 727              	.L53:
 728              		.align	2
 729              	.L52:
 730 009c 003C0240 		.word	1073888256
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 24


 731              		.cfi_endproc
 732              	.LFE248:
 734              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 735              		.align	1
 736              		.global	FLASH_EraseAllBank1Sectors
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 741              	FLASH_EraseAllBank1Sectors:
 742              	.LFB249:
 598:Core/Src/stm32f4xx_flash.c ****  
 599:Core/Src/stm32f4xx_flash.c **** /**
 600:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 601:Core/Src/stm32f4xx_flash.c ****   *
 602:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 603:Core/Src/stm32f4xx_flash.c ****   *      
 604:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 605:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 606:Core/Src/stm32f4xx_flash.c ****   *  
 607:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 608:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 609:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 610:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 611:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 612:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 613:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 614:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 615:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 616:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 617:Core/Src/stm32f4xx_flash.c ****   *       
 618:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 619:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 620:Core/Src/stm32f4xx_flash.c ****   */
 621:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 622:Core/Src/stm32f4xx_flash.c **** {
 743              		.loc 1 622 1
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 16
 746              		@ frame_needed = 1, uses_anonymous_args = 0
 747 0000 80B5     		push	{r7, lr}
 748              	.LCFI50:
 749              		.cfi_def_cfa_offset 8
 750              		.cfi_offset 7, -8
 751              		.cfi_offset 14, -4
 752 0002 84B0     		sub	sp, sp, #16
 753              	.LCFI51:
 754              		.cfi_def_cfa_offset 24
 755 0004 00AF     		add	r7, sp, #0
 756              	.LCFI52:
 757              		.cfi_def_cfa_register 7
 758 0006 0346     		mov	r3, r0
 759 0008 FB71     		strb	r3, [r7, #7]
 623:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 760              		.loc 1 623 12
 761 000a 0023     		movs	r3, #0
 762 000c FB60     		str	r3, [r7, #12]
 624:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 25


 763              		.loc 1 624 16
 764 000e 0923     		movs	r3, #9
 765 0010 FB72     		strb	r3, [r7, #11]
 625:Core/Src/stm32f4xx_flash.c ****   
 626:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 627:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 766              		.loc 1 627 12
 767 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 768 0016 0346     		mov	r3, r0
 769 0018 FB72     		strb	r3, [r7, #11]
 628:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 629:Core/Src/stm32f4xx_flash.c ****   
 630:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 770              		.loc 1 630 5
 771 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 772 001c 002B     		cmp	r3, #0
 773 001e 02D1     		bne	.L55
 631:Core/Src/stm32f4xx_flash.c ****   {
 632:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 774              		.loc 1 632 16
 775 0020 0023     		movs	r3, #0
 776 0022 FB60     		str	r3, [r7, #12]
 777 0024 10E0     		b	.L56
 778              	.L55:
 633:Core/Src/stm32f4xx_flash.c ****   }
 634:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 779              		.loc 1 634 10
 780 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 781 0028 012B     		cmp	r3, #1
 782 002a 03D1     		bne	.L57
 635:Core/Src/stm32f4xx_flash.c ****   {
 636:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 783              		.loc 1 636 15
 784 002c 4FF48073 		mov	r3, #256
 785 0030 FB60     		str	r3, [r7, #12]
 786 0032 09E0     		b	.L56
 787              	.L57:
 637:Core/Src/stm32f4xx_flash.c ****   }
 638:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 788              		.loc 1 638 10
 789 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 790 0036 022B     		cmp	r3, #2
 791 0038 03D1     		bne	.L58
 639:Core/Src/stm32f4xx_flash.c ****   {
 640:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 792              		.loc 1 640 15
 793 003a 4FF40073 		mov	r3, #512
 794 003e FB60     		str	r3, [r7, #12]
 795 0040 02E0     		b	.L56
 796              	.L58:
 641:Core/Src/stm32f4xx_flash.c ****   }
 642:Core/Src/stm32f4xx_flash.c ****   else
 643:Core/Src/stm32f4xx_flash.c ****   {
 644:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 797              		.loc 1 644 15
 798 0042 4FF44073 		mov	r3, #768
 799 0046 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 26


 800              	.L56:
 645:Core/Src/stm32f4xx_flash.c ****   }  
 646:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 801              		.loc 1 646 5
 802 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 803 004a 092B     		cmp	r3, #9
 804 004c 21D1     		bne	.L59
 647:Core/Src/stm32f4xx_flash.c ****   {
 648:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 649:Core/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 805              		.loc 1 649 16
 806 004e 134B     		ldr	r3, .L61
 807 0050 1B69     		ldr	r3, [r3, #16]
 808 0052 124A     		ldr	r2, .L61
 809 0054 23F44073 		bic	r3, r3, #768
 810 0058 1361     		str	r3, [r2, #16]
 650:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 811              		.loc 1 650 16
 812 005a 104B     		ldr	r3, .L61
 813 005c 1A69     		ldr	r2, [r3, #16]
 814 005e 0F49     		ldr	r1, .L61
 815 0060 FB68     		ldr	r3, [r7, #12]
 816 0062 1343     		orrs	r3, r3, r2
 817 0064 0B61     		str	r3, [r1, #16]
 651:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 818              		.loc 1 651 16
 819 0066 0D4B     		ldr	r3, .L61
 820 0068 1B69     		ldr	r3, [r3, #16]
 821 006a 0C4A     		ldr	r2, .L61
 822 006c 43F00403 		orr	r3, r3, #4
 823 0070 1361     		str	r3, [r2, #16]
 652:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 824              		.loc 1 652 16
 825 0072 0A4B     		ldr	r3, .L61
 826 0074 1B69     		ldr	r3, [r3, #16]
 827 0076 094A     		ldr	r2, .L61
 828 0078 43F48033 		orr	r3, r3, #65536
 829 007c 1361     		str	r3, [r2, #16]
 653:Core/Src/stm32f4xx_flash.c ****     
 654:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 655:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 830              		.loc 1 655 14
 831 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 832 0082 0346     		mov	r3, r0
 833 0084 FB72     		strb	r3, [r7, #11]
 656:Core/Src/stm32f4xx_flash.c ****  
 657:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 658:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 834              		.loc 1 658 15
 835 0086 054B     		ldr	r3, .L61
 836 0088 1B69     		ldr	r3, [r3, #16]
 837 008a 044A     		ldr	r2, .L61
 838 008c 23F00403 		bic	r3, r3, #4
 839 0090 1361     		str	r3, [r2, #16]
 840              	.L59:
 659:Core/Src/stm32f4xx_flash.c ****  
 660:Core/Src/stm32f4xx_flash.c ****   }   
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 27


 661:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 662:Core/Src/stm32f4xx_flash.c ****   return status;
 841              		.loc 1 662 10
 842 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 663:Core/Src/stm32f4xx_flash.c **** }
 843              		.loc 1 663 1
 844 0094 1846     		mov	r0, r3
 845 0096 1037     		adds	r7, r7, #16
 846              	.LCFI53:
 847              		.cfi_def_cfa_offset 8
 848 0098 BD46     		mov	sp, r7
 849              	.LCFI54:
 850              		.cfi_def_cfa_register 13
 851              		@ sp needed
 852 009a 80BD     		pop	{r7, pc}
 853              	.L62:
 854              		.align	2
 855              	.L61:
 856 009c 003C0240 		.word	1073888256
 857              		.cfi_endproc
 858              	.LFE249:
 860              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 861              		.align	1
 862              		.global	FLASH_EraseAllBank2Sectors
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 867              	FLASH_EraseAllBank2Sectors:
 868              	.LFB250:
 664:Core/Src/stm32f4xx_flash.c ****  
 665:Core/Src/stm32f4xx_flash.c ****  
 666:Core/Src/stm32f4xx_flash.c **** /**
 667:Core/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 668:Core/Src/stm32f4xx_flash.c ****   *
 669:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 670:Core/Src/stm32f4xx_flash.c ****   *     
 671:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 672:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 673:Core/Src/stm32f4xx_flash.c ****   *     
 674:Core/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 675:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 676:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 677:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 678:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 679:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 680:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 681:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 682:Core/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 683:Core/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 684:Core/Src/stm32f4xx_flash.c ****   *       
 685:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 686:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 687:Core/Src/stm32f4xx_flash.c ****   */
 688:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 689:Core/Src/stm32f4xx_flash.c **** {
 869              		.loc 1 689 1
 870              		.cfi_startproc
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 28


 871              		@ args = 0, pretend = 0, frame = 16
 872              		@ frame_needed = 1, uses_anonymous_args = 0
 873 0000 80B5     		push	{r7, lr}
 874              	.LCFI55:
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 84B0     		sub	sp, sp, #16
 879              	.LCFI56:
 880              		.cfi_def_cfa_offset 24
 881 0004 00AF     		add	r7, sp, #0
 882              	.LCFI57:
 883              		.cfi_def_cfa_register 7
 884 0006 0346     		mov	r3, r0
 885 0008 FB71     		strb	r3, [r7, #7]
 690:Core/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 886              		.loc 1 690 12
 887 000a 0023     		movs	r3, #0
 888 000c FB60     		str	r3, [r7, #12]
 691:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 889              		.loc 1 691 16
 890 000e 0923     		movs	r3, #9
 891 0010 FB72     		strb	r3, [r7, #11]
 692:Core/Src/stm32f4xx_flash.c ****   
 693:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 694:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 892              		.loc 1 694 12
 893 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 894 0016 0346     		mov	r3, r0
 895 0018 FB72     		strb	r3, [r7, #11]
 695:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 696:Core/Src/stm32f4xx_flash.c ****   
 697:Core/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 896              		.loc 1 697 5
 897 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 898 001c 002B     		cmp	r3, #0
 899 001e 02D1     		bne	.L64
 698:Core/Src/stm32f4xx_flash.c ****   {
 699:Core/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 900              		.loc 1 699 16
 901 0020 0023     		movs	r3, #0
 902 0022 FB60     		str	r3, [r7, #12]
 903 0024 10E0     		b	.L65
 904              	.L64:
 700:Core/Src/stm32f4xx_flash.c ****   }
 701:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 905              		.loc 1 701 10
 906 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 907 0028 012B     		cmp	r3, #1
 908 002a 03D1     		bne	.L66
 702:Core/Src/stm32f4xx_flash.c ****   {
 703:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 909              		.loc 1 703 15
 910 002c 4FF48073 		mov	r3, #256
 911 0030 FB60     		str	r3, [r7, #12]
 912 0032 09E0     		b	.L65
 913              	.L66:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 29


 704:Core/Src/stm32f4xx_flash.c ****   }
 705:Core/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 914              		.loc 1 705 10
 915 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 916 0036 022B     		cmp	r3, #2
 917 0038 03D1     		bne	.L67
 706:Core/Src/stm32f4xx_flash.c ****   {
 707:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 918              		.loc 1 707 15
 919 003a 4FF40073 		mov	r3, #512
 920 003e FB60     		str	r3, [r7, #12]
 921 0040 02E0     		b	.L65
 922              	.L67:
 708:Core/Src/stm32f4xx_flash.c ****   }
 709:Core/Src/stm32f4xx_flash.c ****   else
 710:Core/Src/stm32f4xx_flash.c ****   {
 711:Core/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 923              		.loc 1 711 15
 924 0042 4FF44073 		mov	r3, #768
 925 0046 FB60     		str	r3, [r7, #12]
 926              	.L65:
 712:Core/Src/stm32f4xx_flash.c ****   }  
 713:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 927              		.loc 1 713 5
 928 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 929 004a 092B     		cmp	r3, #9
 930 004c 21D1     		bne	.L68
 714:Core/Src/stm32f4xx_flash.c ****   {
 715:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 716:Core/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 931              		.loc 1 716 16
 932 004e 134B     		ldr	r3, .L70
 933 0050 1B69     		ldr	r3, [r3, #16]
 934 0052 124A     		ldr	r2, .L70
 935 0054 23F44073 		bic	r3, r3, #768
 936 0058 1361     		str	r3, [r2, #16]
 717:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 937              		.loc 1 717 16
 938 005a 104B     		ldr	r3, .L70
 939 005c 1A69     		ldr	r2, [r3, #16]
 940 005e 0F49     		ldr	r1, .L70
 941 0060 FB68     		ldr	r3, [r7, #12]
 942 0062 1343     		orrs	r3, r3, r2
 943 0064 0B61     		str	r3, [r1, #16]
 718:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 944              		.loc 1 718 16
 945 0066 0D4B     		ldr	r3, .L70
 946 0068 1B69     		ldr	r3, [r3, #16]
 947 006a 0C4A     		ldr	r2, .L70
 948 006c 43F40043 		orr	r3, r3, #32768
 949 0070 1361     		str	r3, [r2, #16]
 719:Core/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 950              		.loc 1 719 16
 951 0072 0A4B     		ldr	r3, .L70
 952 0074 1B69     		ldr	r3, [r3, #16]
 953 0076 094A     		ldr	r2, .L70
 954 0078 43F48033 		orr	r3, r3, #65536
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 30


 955 007c 1361     		str	r3, [r2, #16]
 720:Core/Src/stm32f4xx_flash.c ****     
 721:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 722:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 956              		.loc 1 722 14
 957 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 958 0082 0346     		mov	r3, r0
 959 0084 FB72     		strb	r3, [r7, #11]
 723:Core/Src/stm32f4xx_flash.c ****  
 724:Core/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 725:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 960              		.loc 1 725 15
 961 0086 054B     		ldr	r3, .L70
 962 0088 1B69     		ldr	r3, [r3, #16]
 963 008a 044A     		ldr	r2, .L70
 964 008c 23F40043 		bic	r3, r3, #32768
 965 0090 1361     		str	r3, [r2, #16]
 966              	.L68:
 726:Core/Src/stm32f4xx_flash.c ****  
 727:Core/Src/stm32f4xx_flash.c ****   }   
 728:Core/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 729:Core/Src/stm32f4xx_flash.c ****   return status;
 967              		.loc 1 729 10
 968 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 730:Core/Src/stm32f4xx_flash.c **** }
 969              		.loc 1 730 1
 970 0094 1846     		mov	r0, r3
 971 0096 1037     		adds	r7, r7, #16
 972              	.LCFI58:
 973              		.cfi_def_cfa_offset 8
 974 0098 BD46     		mov	sp, r7
 975              	.LCFI59:
 976              		.cfi_def_cfa_register 13
 977              		@ sp needed
 978 009a 80BD     		pop	{r7, pc}
 979              	.L71:
 980              		.align	2
 981              	.L70:
 982 009c 003C0240 		.word	1073888256
 983              		.cfi_endproc
 984              	.LFE250:
 986              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 987              		.align	1
 988              		.global	FLASH_ProgramDoubleWord
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 993              	FLASH_ProgramDoubleWord:
 994              	.LFB251:
 731:Core/Src/stm32f4xx_flash.c ****  
 732:Core/Src/stm32f4xx_flash.c **** /**
 733:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 734:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 735:Core/Src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 736:Core/Src/stm32f4xx_flash.c ****   *
 737:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 738:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 31


 739:Core/Src/stm32f4xx_flash.c ****   *  
 740:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 741:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 742:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 743:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 744:Core/Src/stm32f4xx_flash.c ****   */
 745:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 746:Core/Src/stm32f4xx_flash.c **** {
 995              		.loc 1 746 1
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 24
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999 0000 80B5     		push	{r7, lr}
 1000              	.LCFI60:
 1001              		.cfi_def_cfa_offset 8
 1002              		.cfi_offset 7, -8
 1003              		.cfi_offset 14, -4
 1004 0002 86B0     		sub	sp, sp, #24
 1005              	.LCFI61:
 1006              		.cfi_def_cfa_offset 32
 1007 0004 00AF     		add	r7, sp, #0
 1008              	.LCFI62:
 1009              		.cfi_def_cfa_register 7
 1010 0006 F860     		str	r0, [r7, #12]
 1011 0008 C7E90023 		strd	r2, [r7]
 747:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1012              		.loc 1 747 16
 1013 000c 0923     		movs	r3, #9
 1014 000e FB75     		strb	r3, [r7, #23]
 748:Core/Src/stm32f4xx_flash.c ****  
 749:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 750:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 751:Core/Src/stm32f4xx_flash.c ****  
 752:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 753:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1015              		.loc 1 753 12
 1016 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1017 0014 0346     		mov	r3, r0
 1018 0016 FB75     		strb	r3, [r7, #23]
 754:Core/Src/stm32f4xx_flash.c ****   
 755:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1019              		.loc 1 755 5
 1020 0018 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1021 001a 092B     		cmp	r3, #9
 1022 001c 20D1     		bne	.L73
 756:Core/Src/stm32f4xx_flash.c ****   {
 757:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 758:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1023              		.loc 1 758 15
 1024 001e 134B     		ldr	r3, .L75
 1025 0020 1B69     		ldr	r3, [r3, #16]
 1026 0022 124A     		ldr	r2, .L75
 1027 0024 23F44073 		bic	r3, r3, #768
 1028 0028 1361     		str	r3, [r2, #16]
 759:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1029              		.loc 1 759 15
 1030 002a 104B     		ldr	r3, .L75
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 32


 1031 002c 1B69     		ldr	r3, [r3, #16]
 1032 002e 0F4A     		ldr	r2, .L75
 1033 0030 43F44073 		orr	r3, r3, #768
 1034 0034 1361     		str	r3, [r2, #16]
 760:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1035              		.loc 1 760 15
 1036 0036 0D4B     		ldr	r3, .L75
 1037 0038 1B69     		ldr	r3, [r3, #16]
 1038 003a 0C4A     		ldr	r2, .L75
 1039 003c 43F00103 		orr	r3, r3, #1
 1040 0040 1361     		str	r3, [r2, #16]
 761:Core/Src/stm32f4xx_flash.c ****   
 762:Core/Src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 1041              		.loc 1 762 6
 1042 0042 F968     		ldr	r1, [r7, #12]
 1043              		.loc 1 762 30
 1044 0044 D7E90023 		ldrd	r2, [r7]
 1045 0048 C1E90023 		strd	r2, [r1]
 763:Core/Src/stm32f4xx_flash.c ****         
 764:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 765:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 1046              		.loc 1 765 14
 1047 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1048 0050 0346     		mov	r3, r0
 1049 0052 FB75     		strb	r3, [r7, #23]
 766:Core/Src/stm32f4xx_flash.c ****  
 767:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 768:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1050              		.loc 1 768 15
 1051 0054 054B     		ldr	r3, .L75
 1052 0056 1B69     		ldr	r3, [r3, #16]
 1053 0058 044A     		ldr	r2, .L75
 1054 005a 23F00103 		bic	r3, r3, #1
 1055 005e 1361     		str	r3, [r2, #16]
 1056              	.L73:
 769:Core/Src/stm32f4xx_flash.c ****   } 
 770:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 771:Core/Src/stm32f4xx_flash.c ****   return status;
 1057              		.loc 1 771 10
 1058 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 772:Core/Src/stm32f4xx_flash.c **** }
 1059              		.loc 1 772 1
 1060 0062 1846     		mov	r0, r3
 1061 0064 1837     		adds	r7, r7, #24
 1062              	.LCFI63:
 1063              		.cfi_def_cfa_offset 8
 1064 0066 BD46     		mov	sp, r7
 1065              	.LCFI64:
 1066              		.cfi_def_cfa_register 13
 1067              		@ sp needed
 1068 0068 80BD     		pop	{r7, pc}
 1069              	.L76:
 1070 006a 00BF     		.align	2
 1071              	.L75:
 1072 006c 003C0240 		.word	1073888256
 1073              		.cfi_endproc
 1074              	.LFE251:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 33


 1076              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1077              		.align	1
 1078              		.global	FLASH_ProgramWord
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
 1083              	FLASH_ProgramWord:
 1084              	.LFB252:
 773:Core/Src/stm32f4xx_flash.c ****  
 774:Core/Src/stm32f4xx_flash.c **** /**
 775:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 776:Core/Src/stm32f4xx_flash.c ****   *
 777:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 778:Core/Src/stm32f4xx_flash.c ****   *
 779:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 780:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 781:Core/Src/stm32f4xx_flash.c ****   *  
 782:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 783:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 784:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 785:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 786:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 787:Core/Src/stm32f4xx_flash.c ****   */
 788:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 789:Core/Src/stm32f4xx_flash.c **** {
 1085              		.loc 1 789 1
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 16
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
 1090              	.LCFI65:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 84B0     		sub	sp, sp, #16
 1095              	.LCFI66:
 1096              		.cfi_def_cfa_offset 24
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI67:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
 1101 0008 3960     		str	r1, [r7]
 790:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1102              		.loc 1 790 16
 1103 000a 0923     		movs	r3, #9
 1104 000c FB73     		strb	r3, [r7, #15]
 791:Core/Src/stm32f4xx_flash.c ****  
 792:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 793:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 794:Core/Src/stm32f4xx_flash.c ****  
 795:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 796:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1105              		.loc 1 796 12
 1106 000e FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1107 0012 0346     		mov	r3, r0
 1108 0014 FB73     		strb	r3, [r7, #15]
 797:Core/Src/stm32f4xx_flash.c ****   
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 34


 798:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1109              		.loc 1 798 5
 1110 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1111 0018 092B     		cmp	r3, #9
 1112 001a 1ED1     		bne	.L78
 799:Core/Src/stm32f4xx_flash.c ****   {
 800:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 801:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1113              		.loc 1 801 15
 1114 001c 114B     		ldr	r3, .L80
 1115 001e 1B69     		ldr	r3, [r3, #16]
 1116 0020 104A     		ldr	r2, .L80
 1117 0022 23F44073 		bic	r3, r3, #768
 1118 0026 1361     		str	r3, [r2, #16]
 802:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1119              		.loc 1 802 15
 1120 0028 0E4B     		ldr	r3, .L80
 1121 002a 1B69     		ldr	r3, [r3, #16]
 1122 002c 0D4A     		ldr	r2, .L80
 1123 002e 43F40073 		orr	r3, r3, #512
 1124 0032 1361     		str	r3, [r2, #16]
 803:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1125              		.loc 1 803 15
 1126 0034 0B4B     		ldr	r3, .L80
 1127 0036 1B69     		ldr	r3, [r3, #16]
 1128 0038 0A4A     		ldr	r2, .L80
 1129 003a 43F00103 		orr	r3, r3, #1
 1130 003e 1361     		str	r3, [r2, #16]
 804:Core/Src/stm32f4xx_flash.c ****   
 805:Core/Src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 1131              		.loc 1 805 6
 1132 0040 7B68     		ldr	r3, [r7, #4]
 1133              		.loc 1 805 30
 1134 0042 3A68     		ldr	r2, [r7]
 1135 0044 1A60     		str	r2, [r3]
 806:Core/Src/stm32f4xx_flash.c ****         
 807:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 808:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 1136              		.loc 1 808 14
 1137 0046 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1138 004a 0346     		mov	r3, r0
 1139 004c FB73     		strb	r3, [r7, #15]
 809:Core/Src/stm32f4xx_flash.c ****  
 810:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 811:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1140              		.loc 1 811 15
 1141 004e 054B     		ldr	r3, .L80
 1142 0050 1B69     		ldr	r3, [r3, #16]
 1143 0052 044A     		ldr	r2, .L80
 1144 0054 23F00103 		bic	r3, r3, #1
 1145 0058 1361     		str	r3, [r2, #16]
 1146              	.L78:
 812:Core/Src/stm32f4xx_flash.c ****   } 
 813:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 814:Core/Src/stm32f4xx_flash.c ****   return status;
 1147              		.loc 1 814 10
 1148 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 35


 815:Core/Src/stm32f4xx_flash.c **** }
 1149              		.loc 1 815 1
 1150 005c 1846     		mov	r0, r3
 1151 005e 1037     		adds	r7, r7, #16
 1152              	.LCFI68:
 1153              		.cfi_def_cfa_offset 8
 1154 0060 BD46     		mov	sp, r7
 1155              	.LCFI69:
 1156              		.cfi_def_cfa_register 13
 1157              		@ sp needed
 1158 0062 80BD     		pop	{r7, pc}
 1159              	.L81:
 1160              		.align	2
 1161              	.L80:
 1162 0064 003C0240 		.word	1073888256
 1163              		.cfi_endproc
 1164              	.LFE252:
 1166              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1167              		.align	1
 1168              		.global	FLASH_ProgramHalfWord
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1173              	FLASH_ProgramHalfWord:
 1174              	.LFB253:
 816:Core/Src/stm32f4xx_flash.c ****  
 817:Core/Src/stm32f4xx_flash.c **** /**
 818:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 819:Core/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 820:Core/Src/stm32f4xx_flash.c ****   *
 821:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 822:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 823:Core/Src/stm32f4xx_flash.c ****   * 
 824:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 825:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 826:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 827:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 828:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 829:Core/Src/stm32f4xx_flash.c ****   */
 830:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 831:Core/Src/stm32f4xx_flash.c **** {
 1175              		.loc 1 831 1
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 16
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179 0000 80B5     		push	{r7, lr}
 1180              	.LCFI70:
 1181              		.cfi_def_cfa_offset 8
 1182              		.cfi_offset 7, -8
 1183              		.cfi_offset 14, -4
 1184 0002 84B0     		sub	sp, sp, #16
 1185              	.LCFI71:
 1186              		.cfi_def_cfa_offset 24
 1187 0004 00AF     		add	r7, sp, #0
 1188              	.LCFI72:
 1189              		.cfi_def_cfa_register 7
 1190 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 36


 1191 0008 0B46     		mov	r3, r1
 1192 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 832:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1193              		.loc 1 832 16
 1194 000c 0923     		movs	r3, #9
 1195 000e FB73     		strb	r3, [r7, #15]
 833:Core/Src/stm32f4xx_flash.c ****  
 834:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 835:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 836:Core/Src/stm32f4xx_flash.c ****  
 837:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 838:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1196              		.loc 1 838 12
 1197 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1198 0014 0346     		mov	r3, r0
 1199 0016 FB73     		strb	r3, [r7, #15]
 839:Core/Src/stm32f4xx_flash.c ****   
 840:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1200              		.loc 1 840 5
 1201 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1202 001a 092B     		cmp	r3, #9
 1203 001c 1ED1     		bne	.L83
 841:Core/Src/stm32f4xx_flash.c ****   {
 842:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 843:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1204              		.loc 1 843 15
 1205 001e 124B     		ldr	r3, .L85
 1206 0020 1B69     		ldr	r3, [r3, #16]
 1207 0022 114A     		ldr	r2, .L85
 1208 0024 23F44073 		bic	r3, r3, #768
 1209 0028 1361     		str	r3, [r2, #16]
 844:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 1210              		.loc 1 844 15
 1211 002a 0F4B     		ldr	r3, .L85
 1212 002c 1B69     		ldr	r3, [r3, #16]
 1213 002e 0E4A     		ldr	r2, .L85
 1214 0030 43F48073 		orr	r3, r3, #256
 1215 0034 1361     		str	r3, [r2, #16]
 845:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1216              		.loc 1 845 15
 1217 0036 0C4B     		ldr	r3, .L85
 1218 0038 1B69     		ldr	r3, [r3, #16]
 1219 003a 0B4A     		ldr	r2, .L85
 1220 003c 43F00103 		orr	r3, r3, #1
 1221 0040 1361     		str	r3, [r2, #16]
 846:Core/Src/stm32f4xx_flash.c ****   
 847:Core/Src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 1222              		.loc 1 847 6
 1223 0042 7B68     		ldr	r3, [r7, #4]
 1224              		.loc 1 847 30
 1225 0044 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1226 0046 1A80     		strh	r2, [r3]	@ movhi
 848:Core/Src/stm32f4xx_flash.c ****         
 849:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 850:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 1227              		.loc 1 850 14
 1228 0048 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 37


 1229 004c 0346     		mov	r3, r0
 1230 004e FB73     		strb	r3, [r7, #15]
 851:Core/Src/stm32f4xx_flash.c ****  
 852:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 853:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1231              		.loc 1 853 15
 1232 0050 054B     		ldr	r3, .L85
 1233 0052 1B69     		ldr	r3, [r3, #16]
 1234 0054 044A     		ldr	r2, .L85
 1235 0056 23F00103 		bic	r3, r3, #1
 1236 005a 1361     		str	r3, [r2, #16]
 1237              	.L83:
 854:Core/Src/stm32f4xx_flash.c ****   } 
 855:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 856:Core/Src/stm32f4xx_flash.c ****   return status;
 1238              		.loc 1 856 10
 1239 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 857:Core/Src/stm32f4xx_flash.c **** }
 1240              		.loc 1 857 1
 1241 005e 1846     		mov	r0, r3
 1242 0060 1037     		adds	r7, r7, #16
 1243              	.LCFI73:
 1244              		.cfi_def_cfa_offset 8
 1245 0062 BD46     		mov	sp, r7
 1246              	.LCFI74:
 1247              		.cfi_def_cfa_register 13
 1248              		@ sp needed
 1249 0064 80BD     		pop	{r7, pc}
 1250              	.L86:
 1251 0066 00BF     		.align	2
 1252              	.L85:
 1253 0068 003C0240 		.word	1073888256
 1254              		.cfi_endproc
 1255              	.LFE253:
 1257              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1258              		.align	1
 1259              		.global	FLASH_ProgramByte
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1264              	FLASH_ProgramByte:
 1265              	.LFB254:
 858:Core/Src/stm32f4xx_flash.c ****  
 859:Core/Src/stm32f4xx_flash.c **** /**
 860:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 861:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 862:Core/Src/stm32f4xx_flash.c ****   *
 863:Core/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 864:Core/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 865:Core/Src/stm32f4xx_flash.c ****   * 
 866:Core/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 867:Core/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 868:Core/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 869:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
 870:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
 871:Core/Src/stm32f4xx_flash.c ****   */
 872:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 38


 873:Core/Src/stm32f4xx_flash.c **** {
 1266              		.loc 1 873 1
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 16
 1269              		@ frame_needed = 1, uses_anonymous_args = 0
 1270 0000 80B5     		push	{r7, lr}
 1271              	.LCFI75:
 1272              		.cfi_def_cfa_offset 8
 1273              		.cfi_offset 7, -8
 1274              		.cfi_offset 14, -4
 1275 0002 84B0     		sub	sp, sp, #16
 1276              	.LCFI76:
 1277              		.cfi_def_cfa_offset 24
 1278 0004 00AF     		add	r7, sp, #0
 1279              	.LCFI77:
 1280              		.cfi_def_cfa_register 7
 1281 0006 7860     		str	r0, [r7, #4]
 1282 0008 0B46     		mov	r3, r1
 1283 000a FB70     		strb	r3, [r7, #3]
 874:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1284              		.loc 1 874 16
 1285 000c 0923     		movs	r3, #9
 1286 000e FB73     		strb	r3, [r7, #15]
 875:Core/Src/stm32f4xx_flash.c ****  
 876:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 877:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 878:Core/Src/stm32f4xx_flash.c ****  
 879:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 880:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1287              		.loc 1 880 12
 1288 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1289 0014 0346     		mov	r3, r0
 1290 0016 FB73     		strb	r3, [r7, #15]
 881:Core/Src/stm32f4xx_flash.c ****   
 882:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1291              		.loc 1 882 5
 1292 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1293 001a 092B     		cmp	r3, #9
 1294 001c 1CD1     		bne	.L88
 883:Core/Src/stm32f4xx_flash.c ****   {
 884:Core/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 885:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1295              		.loc 1 885 15
 1296 001e 114B     		ldr	r3, .L90
 1297 0020 1B69     		ldr	r3, [r3, #16]
 1298 0022 104A     		ldr	r2, .L90
 1299 0024 23F44073 		bic	r3, r3, #768
 1300 0028 1361     		str	r3, [r2, #16]
 886:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1301              		.loc 1 886 15
 1302 002a 0E4B     		ldr	r3, .L90
 1303 002c 0D4A     		ldr	r2, .L90
 1304 002e 1B69     		ldr	r3, [r3, #16]
 1305 0030 1361     		str	r3, [r2, #16]
 887:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1306              		.loc 1 887 15
 1307 0032 0C4B     		ldr	r3, .L90
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 39


 1308 0034 1B69     		ldr	r3, [r3, #16]
 1309 0036 0B4A     		ldr	r2, .L90
 1310 0038 43F00103 		orr	r3, r3, #1
 1311 003c 1361     		str	r3, [r2, #16]
 888:Core/Src/stm32f4xx_flash.c ****   
 889:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 1312              		.loc 1 889 6
 1313 003e 7B68     		ldr	r3, [r7, #4]
 1314              		.loc 1 889 29
 1315 0040 FA78     		ldrb	r2, [r7, #3]
 1316 0042 1A70     		strb	r2, [r3]
 890:Core/Src/stm32f4xx_flash.c ****         
 891:Core/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 892:Core/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation2();
 1317              		.loc 1 892 14
 1318 0044 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1319 0048 0346     		mov	r3, r0
 1320 004a FB73     		strb	r3, [r7, #15]
 893:Core/Src/stm32f4xx_flash.c ****  
 894:Core/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 895:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1321              		.loc 1 895 15
 1322 004c 054B     		ldr	r3, .L90
 1323 004e 1B69     		ldr	r3, [r3, #16]
 1324 0050 044A     		ldr	r2, .L90
 1325 0052 23F00103 		bic	r3, r3, #1
 1326 0056 1361     		str	r3, [r2, #16]
 1327              	.L88:
 896:Core/Src/stm32f4xx_flash.c ****   } 
 897:Core/Src/stm32f4xx_flash.c ****  
 898:Core/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 899:Core/Src/stm32f4xx_flash.c ****   return status;
 1328              		.loc 1 899 10
 1329 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 900:Core/Src/stm32f4xx_flash.c **** }
 1330              		.loc 1 900 1
 1331 005a 1846     		mov	r0, r3
 1332 005c 1037     		adds	r7, r7, #16
 1333              	.LCFI78:
 1334              		.cfi_def_cfa_offset 8
 1335 005e BD46     		mov	sp, r7
 1336              	.LCFI79:
 1337              		.cfi_def_cfa_register 13
 1338              		@ sp needed
 1339 0060 80BD     		pop	{r7, pc}
 1340              	.L91:
 1341 0062 00BF     		.align	2
 1342              	.L90:
 1343 0064 003C0240 		.word	1073888256
 1344              		.cfi_endproc
 1345              	.LFE254:
 1347              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 1348              		.align	1
 1349              		.global	FLASH_OB_Unlock
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 40


 1354              	FLASH_OB_Unlock:
 1355              	.LFB255:
 901:Core/Src/stm32f4xx_flash.c ****  
 902:Core/Src/stm32f4xx_flash.c **** /**
 903:Core/Src/stm32f4xx_flash.c ****   * @}
 904:Core/Src/stm32f4xx_flash.c ****   */
 905:Core/Src/stm32f4xx_flash.c ****  
 906:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 907:Core/Src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 908:Core/Src/stm32f4xx_flash.c ****  *
 909:Core/Src/stm32f4xx_flash.c **** @verbatim   
 910:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
 911:Core/Src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 912:Core/Src/stm32f4xx_flash.c ****  ===============================================================================  
 913:Core/Src/stm32f4xx_flash.c ****     [..]
 914:Core/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 915:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 916:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 917:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 918:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 919:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 920:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 921:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 922:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 923:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 924:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 925:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 926:Core/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 927:Core/Src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 928:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 929:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 930:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
 931:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 932:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 933:Core/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 934:Core/Src/stm32f4xx_flash.c ****     [..]  
 935:Core/Src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 936:Core/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 937:Core/Src/stm32f4xx_flash.c ****     [..]   
 938:Core/Src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 939:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 940:Core/Src/stm32f4xx_flash.c ****           register access
 941:Core/Src/stm32f4xx_flash.c ****  
 942:Core/Src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 943:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 944:Core/Src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 945:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 946:Core/Src/stm32f4xx_flash.c ****              Protection Level
 947:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 948:Core/Src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 949:Core/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level             
 950:Core/Src/stm32f4xx_flash.c ****  
 951:Core/Src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 952:Core/Src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 953:Core/Src/stm32f4xx_flash.c ****           programming process.
 954:Core/Src/stm32f4xx_flash.c ****      
 955:Core/Src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 41


 956:Core/Src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 957:Core/Src/stm32f4xx_flash.c ****  
 958:Core/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 959:Core/Src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 960:Core/Src/stm32f4xx_flash.c ****           possible unwanted operations)
 961:Core/Src/stm32f4xx_flash.c ****     
 962:Core/Src/stm32f4xx_flash.c **** @endverbatim
 963:Core/Src/stm32f4xx_flash.c ****   * @{
 964:Core/Src/stm32f4xx_flash.c ****   */
 965:Core/Src/stm32f4xx_flash.c ****  
 966:Core/Src/stm32f4xx_flash.c **** /**
 967:Core/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 968:Core/Src/stm32f4xx_flash.c ****   * @param  None
 969:Core/Src/stm32f4xx_flash.c ****   * @retval None
 970:Core/Src/stm32f4xx_flash.c ****   */
 971:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 972:Core/Src/stm32f4xx_flash.c **** {
 1356              		.loc 1 972 1
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 1, uses_anonymous_args = 0
 1360              		@ link register save eliminated.
 1361 0000 80B4     		push	{r7}
 1362              	.LCFI80:
 1363              		.cfi_def_cfa_offset 4
 1364              		.cfi_offset 7, -4
 1365 0002 00AF     		add	r7, sp, #0
 1366              	.LCFI81:
 1367              		.cfi_def_cfa_register 7
 973:Core/Src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 1368              		.loc 1 973 12
 1369 0004 084B     		ldr	r3, .L95
 1370 0006 5B69     		ldr	r3, [r3, #20]
 1371              		.loc 1 973 20
 1372 0008 03F00103 		and	r3, r3, #1
 1373              		.loc 1 973 5
 1374 000c 002B     		cmp	r3, #0
 1375 000e 05D0     		beq	.L94
 974:Core/Src/stm32f4xx_flash.c ****   {
 975:Core/Src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 976:Core/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 1376              		.loc 1 976 10
 1377 0010 054B     		ldr	r3, .L95
 1378              		.loc 1 976 20
 1379 0012 064A     		ldr	r2, .L95+4
 1380 0014 9A60     		str	r2, [r3, #8]
 977:Core/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 1381              		.loc 1 977 10
 1382 0016 044B     		ldr	r3, .L95
 1383              		.loc 1 977 20
 1384 0018 054A     		ldr	r2, .L95+8
 1385 001a 9A60     		str	r2, [r3, #8]
 1386              	.L94:
 978:Core/Src/stm32f4xx_flash.c ****   }  
 979:Core/Src/stm32f4xx_flash.c **** }
 1387              		.loc 1 979 1
 1388 001c 00BF     		nop
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 42


 1389 001e BD46     		mov	sp, r7
 1390              	.LCFI82:
 1391              		.cfi_def_cfa_register 13
 1392              		@ sp needed
 1393 0020 5DF8047B 		ldr	r7, [sp], #4
 1394              	.LCFI83:
 1395              		.cfi_restore 7
 1396              		.cfi_def_cfa_offset 0
 1397 0024 7047     		bx	lr
 1398              	.L96:
 1399 0026 00BF     		.align	2
 1400              	.L95:
 1401 0028 003C0240 		.word	1073888256
 1402 002c 3B2A1908 		.word	135866939
 1403 0030 7F6E5D4C 		.word	1281191551
 1404              		.cfi_endproc
 1405              	.LFE255:
 1407              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 1408              		.align	1
 1409              		.global	FLASH_OB_Lock
 1410              		.syntax unified
 1411              		.thumb
 1412              		.thumb_func
 1414              	FLASH_OB_Lock:
 1415              	.LFB256:
 980:Core/Src/stm32f4xx_flash.c ****  
 981:Core/Src/stm32f4xx_flash.c **** /**
 982:Core/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 983:Core/Src/stm32f4xx_flash.c ****   * @param  None
 984:Core/Src/stm32f4xx_flash.c ****   * @retval None
 985:Core/Src/stm32f4xx_flash.c ****   */
 986:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 987:Core/Src/stm32f4xx_flash.c **** {
 1416              		.loc 1 987 1
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 0
 1419              		@ frame_needed = 1, uses_anonymous_args = 0
 1420              		@ link register save eliminated.
 1421 0000 80B4     		push	{r7}
 1422              	.LCFI84:
 1423              		.cfi_def_cfa_offset 4
 1424              		.cfi_offset 7, -4
 1425 0002 00AF     		add	r7, sp, #0
 1426              	.LCFI85:
 1427              		.cfi_def_cfa_register 7
 988:Core/Src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 989:Core/Src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 1428              		.loc 1 989 16
 1429 0004 054B     		ldr	r3, .L98
 1430 0006 5B69     		ldr	r3, [r3, #20]
 1431 0008 044A     		ldr	r2, .L98
 1432 000a 43F00103 		orr	r3, r3, #1
 1433 000e 5361     		str	r3, [r2, #20]
 990:Core/Src/stm32f4xx_flash.c **** }
 1434              		.loc 1 990 1
 1435 0010 00BF     		nop
 1436 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 43


 1437              	.LCFI86:
 1438              		.cfi_def_cfa_register 13
 1439              		@ sp needed
 1440 0014 5DF8047B 		ldr	r7, [sp], #4
 1441              	.LCFI87:
 1442              		.cfi_restore 7
 1443              		.cfi_def_cfa_offset 0
 1444 0018 7047     		bx	lr
 1445              	.L99:
 1446 001a 00BF     		.align	2
 1447              	.L98:
 1448 001c 003C0240 		.word	1073888256
 1449              		.cfi_endproc
 1450              	.LFE256:
 1452              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1453              		.align	1
 1454              		.global	FLASH_OB_WRPConfig
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1459              	FLASH_OB_WRPConfig:
 1460              	.LFB257:
 991:Core/Src/stm32f4xx_flash.c ****  
 992:Core/Src/stm32f4xx_flash.c **** /**
 993:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 994:Core/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 995:Core/Src/stm32f4xx_flash.c ****   *
 996:Core/Src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 997:Core/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 998:Core/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 999:Core/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1000:Core/Src/stm32f4xx_flash.c ****   * 
1001:Core/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1002:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1003:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1004:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1005:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1006:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1007:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1008:Core/Src/stm32f4xx_flash.c ****   */
1009:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1010:Core/Src/stm32f4xx_flash.c **** { 
 1461              		.loc 1 1010 1
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 16
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465 0000 80B5     		push	{r7, lr}
 1466              	.LCFI88:
 1467              		.cfi_def_cfa_offset 8
 1468              		.cfi_offset 7, -8
 1469              		.cfi_offset 14, -4
 1470 0002 84B0     		sub	sp, sp, #16
 1471              	.LCFI89:
 1472              		.cfi_def_cfa_offset 24
 1473 0004 00AF     		add	r7, sp, #0
 1474              	.LCFI90:
 1475              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 44


 1476 0006 7860     		str	r0, [r7, #4]
 1477 0008 0B46     		mov	r3, r1
 1478 000a FB70     		strb	r3, [r7, #3]
1011:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1479              		.loc 1 1011 16
 1480 000c 0923     		movs	r3, #9
 1481 000e FB73     		strb	r3, [r7, #15]
1012:Core/Src/stm32f4xx_flash.c ****   
1013:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1014:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1015:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1016:Core/Src/stm32f4xx_flash.c ****     
1017:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1482              		.loc 1 1017 12
 1483 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1484 0014 0346     		mov	r3, r0
 1485 0016 FB73     		strb	r3, [r7, #15]
1018:Core/Src/stm32f4xx_flash.c ****  
1019:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1486              		.loc 1 1019 5
 1487 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1488 001a 092B     		cmp	r3, #9
 1489 001c 17D1     		bne	.L103
1020:Core/Src/stm32f4xx_flash.c ****   { 
1021:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1490              		.loc 1 1021 7
 1491 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1492 0020 002B     		cmp	r3, #0
 1493 0022 0BD0     		beq	.L102
1022:Core/Src/stm32f4xx_flash.c ****     {
1023:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 1494              		.loc 1 1023 44
 1495 0024 0C4B     		ldr	r3, .L104
 1496 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1497 0028 9AB2     		uxth	r2, r3
 1498 002a 7B68     		ldr	r3, [r7, #4]
 1499 002c 9BB2     		uxth	r3, r3
 1500 002e DB43     		mvns	r3, r3
 1501 0030 9BB2     		uxth	r3, r3
 1502 0032 0949     		ldr	r1, .L104
 1503 0034 1340     		ands	r3, r3, r2
 1504 0036 9BB2     		uxth	r3, r3
 1505 0038 0B80     		strh	r3, [r1]	@ movhi
1024:Core/Src/stm32f4xx_flash.c ****     }
1025:Core/Src/stm32f4xx_flash.c ****     else
1026:Core/Src/stm32f4xx_flash.c ****     {
1027:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1028:Core/Src/stm32f4xx_flash.c ****     }
1029:Core/Src/stm32f4xx_flash.c ****   }
1030:Core/Src/stm32f4xx_flash.c **** }
 1506              		.loc 1 1030 1
 1507 003a 08E0     		b	.L103
 1508              	.L102:
1027:Core/Src/stm32f4xx_flash.c ****     }
 1509              		.loc 1 1027 44
 1510 003c 064B     		ldr	r3, .L104
 1511 003e 1B88     		ldrh	r3, [r3]	@ movhi
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 45


 1512 0040 9AB2     		uxth	r2, r3
1027:Core/Src/stm32f4xx_flash.c ****     }
 1513              		.loc 1 1027 47
 1514 0042 7B68     		ldr	r3, [r7, #4]
 1515 0044 9BB2     		uxth	r3, r3
1027:Core/Src/stm32f4xx_flash.c ****     }
 1516              		.loc 1 1027 44
 1517 0046 0449     		ldr	r1, .L104
 1518 0048 1343     		orrs	r3, r3, r2
 1519 004a 9BB2     		uxth	r3, r3
 1520 004c 0B80     		strh	r3, [r1]	@ movhi
 1521              	.L103:
 1522              		.loc 1 1030 1
 1523 004e 00BF     		nop
 1524 0050 1037     		adds	r7, r7, #16
 1525              	.LCFI91:
 1526              		.cfi_def_cfa_offset 8
 1527 0052 BD46     		mov	sp, r7
 1528              	.LCFI92:
 1529              		.cfi_def_cfa_register 13
 1530              		@ sp needed
 1531 0054 80BD     		pop	{r7, pc}
 1532              	.L105:
 1533 0056 00BF     		.align	2
 1534              	.L104:
 1535 0058 163C0240 		.word	1073888278
 1536              		.cfi_endproc
 1537              	.LFE257:
 1539              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1540              		.align	1
 1541              		.global	FLASH_OB_WRP1Config
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1546              	FLASH_OB_WRP1Config:
 1547              	.LFB258:
1031:Core/Src/stm32f4xx_flash.c ****  
1032:Core/Src/stm32f4xx_flash.c **** /**
1033:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
1034:Core/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1035:Core/Src/stm32f4xx_flash.c ****   *           
1036:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1037:Core/Src/stm32f4xx_flash.c ****   *   
1038:Core/Src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1039:Core/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1040:Core/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1041:Core/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1042:Core/Src/stm32f4xx_flash.c ****   * 
1043:Core/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1044:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1045:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1046:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1047:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1048:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1049:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1050:Core/Src/stm32f4xx_flash.c ****   */
1051:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 46


1052:Core/Src/stm32f4xx_flash.c **** { 
 1548              		.loc 1 1052 1
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 16
 1551              		@ frame_needed = 1, uses_anonymous_args = 0
 1552 0000 80B5     		push	{r7, lr}
 1553              	.LCFI93:
 1554              		.cfi_def_cfa_offset 8
 1555              		.cfi_offset 7, -8
 1556              		.cfi_offset 14, -4
 1557 0002 84B0     		sub	sp, sp, #16
 1558              	.LCFI94:
 1559              		.cfi_def_cfa_offset 24
 1560 0004 00AF     		add	r7, sp, #0
 1561              	.LCFI95:
 1562              		.cfi_def_cfa_register 7
 1563 0006 7860     		str	r0, [r7, #4]
 1564 0008 0B46     		mov	r3, r1
 1565 000a FB70     		strb	r3, [r7, #3]
1053:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1566              		.loc 1 1053 16
 1567 000c 0923     		movs	r3, #9
 1568 000e FB73     		strb	r3, [r7, #15]
1054:Core/Src/stm32f4xx_flash.c ****   
1055:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1056:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1057:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1058:Core/Src/stm32f4xx_flash.c ****     
1059:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1569              		.loc 1 1059 12
 1570 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1571 0014 0346     		mov	r3, r0
 1572 0016 FB73     		strb	r3, [r7, #15]
1060:Core/Src/stm32f4xx_flash.c ****  
1061:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1573              		.loc 1 1061 5
 1574 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1575 001a 092B     		cmp	r3, #9
 1576 001c 17D1     		bne	.L109
1062:Core/Src/stm32f4xx_flash.c ****   { 
1063:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1577              		.loc 1 1063 7
 1578 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1579 0020 002B     		cmp	r3, #0
 1580 0022 0BD0     		beq	.L108
1064:Core/Src/stm32f4xx_flash.c ****     {
1065:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 1581              		.loc 1 1065 45
 1582 0024 0C4B     		ldr	r3, .L110
 1583 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1584 0028 9AB2     		uxth	r2, r3
 1585 002a 7B68     		ldr	r3, [r7, #4]
 1586 002c 9BB2     		uxth	r3, r3
 1587 002e DB43     		mvns	r3, r3
 1588 0030 9BB2     		uxth	r3, r3
 1589 0032 0949     		ldr	r1, .L110
 1590 0034 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 47


 1591 0036 9BB2     		uxth	r3, r3
 1592 0038 0B80     		strh	r3, [r1]	@ movhi
1066:Core/Src/stm32f4xx_flash.c ****     }
1067:Core/Src/stm32f4xx_flash.c ****     else
1068:Core/Src/stm32f4xx_flash.c ****     {
1069:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1070:Core/Src/stm32f4xx_flash.c ****     }
1071:Core/Src/stm32f4xx_flash.c ****   }
1072:Core/Src/stm32f4xx_flash.c **** }
 1593              		.loc 1 1072 1
 1594 003a 08E0     		b	.L109
 1595              	.L108:
1069:Core/Src/stm32f4xx_flash.c ****     }
 1596              		.loc 1 1069 45
 1597 003c 064B     		ldr	r3, .L110
 1598 003e 1B88     		ldrh	r3, [r3]	@ movhi
 1599 0040 9AB2     		uxth	r2, r3
1069:Core/Src/stm32f4xx_flash.c ****     }
 1600              		.loc 1 1069 48
 1601 0042 7B68     		ldr	r3, [r7, #4]
 1602 0044 9BB2     		uxth	r3, r3
1069:Core/Src/stm32f4xx_flash.c ****     }
 1603              		.loc 1 1069 45
 1604 0046 0449     		ldr	r1, .L110
 1605 0048 1343     		orrs	r3, r3, r2
 1606 004a 9BB2     		uxth	r3, r3
 1607 004c 0B80     		strh	r3, [r1]	@ movhi
 1608              	.L109:
 1609              		.loc 1 1072 1
 1610 004e 00BF     		nop
 1611 0050 1037     		adds	r7, r7, #16
 1612              	.LCFI96:
 1613              		.cfi_def_cfa_offset 8
 1614 0052 BD46     		mov	sp, r7
 1615              	.LCFI97:
 1616              		.cfi_def_cfa_register 13
 1617              		@ sp needed
 1618 0054 80BD     		pop	{r7, pc}
 1619              	.L111:
 1620 0056 00BF     		.align	2
 1621              	.L110:
 1622 0058 1A3C0240 		.word	1073888282
 1623              		.cfi_endproc
 1624              	.LFE258:
 1626              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 1627              		.align	1
 1628              		.global	FLASH_OB_PCROPSelectionConfig
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1633              	FLASH_OB_PCROPSelectionConfig:
 1634              	.LFB259:
1073:Core/Src/stm32f4xx_flash.c ****  
1074:Core/Src/stm32f4xx_flash.c **** /**
1075:Core/Src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1076:Core/Src/stm32f4xx_flash.c ****   * 
1077:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 48


1078:Core/Src/stm32f4xx_flash.c ****   * 
1079:Core/Src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1080:Core/Src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1081:Core/Src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1082:Core/Src/stm32f4xx_flash.c ****   *   
1083:Core/Src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1084:Core/Src/stm32f4xx_flash.c ****   *   
1085:Core/Src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1086:Core/Src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1087:Core/Src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1088:Core/Src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1089:Core/Src/stm32f4xx_flash.c ****   *         below safety sequence :       
1090:Core/Src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1091:Core/Src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1092:Core/Src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1093:Core/Src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1094:Core/Src/stm32f4xx_flash.c ****   * 
1095:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1096:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1097:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1098:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1099:Core/Src/stm32f4xx_flash.c ****   * @retval None
1100:Core/Src/stm32f4xx_flash.c ****   */
1101:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1102:Core/Src/stm32f4xx_flash.c **** {  
 1635              		.loc 1 1102 1
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 16
 1638              		@ frame_needed = 1, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
 1640 0000 80B4     		push	{r7}
 1641              	.LCFI98:
 1642              		.cfi_def_cfa_offset 4
 1643              		.cfi_offset 7, -4
 1644 0002 85B0     		sub	sp, sp, #20
 1645              	.LCFI99:
 1646              		.cfi_def_cfa_offset 24
 1647 0004 00AF     		add	r7, sp, #0
 1648              	.LCFI100:
 1649              		.cfi_def_cfa_register 7
 1650 0006 0346     		mov	r3, r0
 1651 0008 FB71     		strb	r3, [r7, #7]
1103:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1652              		.loc 1 1103 11
 1653 000a FF23     		movs	r3, #255
 1654 000c FB73     		strb	r3, [r7, #15]
1104:Core/Src/stm32f4xx_flash.c ****       
1105:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1106:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1107:Core/Src/stm32f4xx_flash.c ****   
1108:Core/Src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1109:Core/Src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 1655              		.loc 1 1109 65
 1656 000e 094B     		ldr	r3, .L113
 1657 0010 1B78     		ldrb	r3, [r3]
 1658 0012 DBB2     		uxtb	r3, r3
 1659              		.loc 1 1109 13
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 49


 1660 0014 03F07F03 		and	r3, r3, #127
 1661 0018 FB73     		strb	r3, [r7, #15]
1110:Core/Src/stm32f4xx_flash.c ****   /* Update Option Byte */
1111:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 1662              		.loc 1 1111 3
 1663 001a 0649     		ldr	r1, .L113
 1664              		.loc 1 1111 42
 1665 001c FA79     		ldrb	r2, [r7, #7]
 1666 001e FB7B     		ldrb	r3, [r7, #15]
 1667 0020 1343     		orrs	r3, r3, r2
 1668 0022 DBB2     		uxtb	r3, r3
 1669              		.loc 1 1111 40
 1670 0024 0B70     		strb	r3, [r1]
1112:Core/Src/stm32f4xx_flash.c ****     
1113:Core/Src/stm32f4xx_flash.c **** }
 1671              		.loc 1 1113 1
 1672 0026 00BF     		nop
 1673 0028 1437     		adds	r7, r7, #20
 1674              	.LCFI101:
 1675              		.cfi_def_cfa_offset 4
 1676 002a BD46     		mov	sp, r7
 1677              	.LCFI102:
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 002c 5DF8047B 		ldr	r7, [sp], #4
 1681              	.LCFI103:
 1682              		.cfi_restore 7
 1683              		.cfi_def_cfa_offset 0
 1684 0030 7047     		bx	lr
 1685              	.L114:
 1686 0032 00BF     		.align	2
 1687              	.L113:
 1688 0034 173C0240 		.word	1073888279
 1689              		.cfi_endproc
 1690              	.LFE259:
 1692              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1693              		.align	1
 1694              		.global	FLASH_OB_PCROPConfig
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1699              	FLASH_OB_PCROPConfig:
 1700              	.LFB260:
1114:Core/Src/stm32f4xx_flash.c ****  
1115:Core/Src/stm32f4xx_flash.c **** /**
1116:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1117:Core/Src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1118:Core/Src/stm32f4xx_flash.c ****   *           
1119:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx , STM32F401xx/411xE 
1120:Core/Src/stm32f4xx_flash.c ****   *         and STM32F412xG devices.
1121:Core/Src/stm32f4xx_flash.c ****   *   
1122:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1123:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1124:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1125:Core/Src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1126:Core/Src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1127:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 50


1128:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1129:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1130:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1131:Core/Src/stm32f4xx_flash.c ****   */
1132:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1133:Core/Src/stm32f4xx_flash.c **** { 
 1701              		.loc 1 1133 1
 1702              		.cfi_startproc
 1703              		@ args = 0, pretend = 0, frame = 16
 1704              		@ frame_needed = 1, uses_anonymous_args = 0
 1705 0000 80B5     		push	{r7, lr}
 1706              	.LCFI104:
 1707              		.cfi_def_cfa_offset 8
 1708              		.cfi_offset 7, -8
 1709              		.cfi_offset 14, -4
 1710 0002 84B0     		sub	sp, sp, #16
 1711              	.LCFI105:
 1712              		.cfi_def_cfa_offset 24
 1713 0004 00AF     		add	r7, sp, #0
 1714              	.LCFI106:
 1715              		.cfi_def_cfa_register 7
 1716 0006 7860     		str	r0, [r7, #4]
 1717 0008 0B46     		mov	r3, r1
 1718 000a FB70     		strb	r3, [r7, #3]
1134:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1719              		.loc 1 1134 16
 1720 000c 0923     		movs	r3, #9
 1721 000e FB73     		strb	r3, [r7, #15]
1135:Core/Src/stm32f4xx_flash.c ****   
1136:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1137:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1138:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1139:Core/Src/stm32f4xx_flash.c ****     
1140:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1722              		.loc 1 1140 12
 1723 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1724 0014 0346     		mov	r3, r0
 1725 0016 FB73     		strb	r3, [r7, #15]
1141:Core/Src/stm32f4xx_flash.c ****  
1142:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1726              		.loc 1 1142 5
 1727 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1728 001a 092B     		cmp	r3, #9
 1729 001c 17D1     		bne	.L118
1143:Core/Src/stm32f4xx_flash.c ****   { 
1144:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1730              		.loc 1 1144 7
 1731 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1732 0020 002B     		cmp	r3, #0
 1733 0022 09D0     		beq	.L117
1145:Core/Src/stm32f4xx_flash.c ****     {
1146:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 1734              		.loc 1 1146 44
 1735 0024 0C4B     		ldr	r3, .L119
 1736 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1737 0028 9AB2     		uxth	r2, r3
 1738              		.loc 1 1146 47
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 51


 1739 002a 7B68     		ldr	r3, [r7, #4]
 1740 002c 9BB2     		uxth	r3, r3
 1741              		.loc 1 1146 44
 1742 002e 0A49     		ldr	r1, .L119
 1743 0030 1343     		orrs	r3, r3, r2
 1744 0032 9BB2     		uxth	r3, r3
 1745 0034 0B80     		strh	r3, [r1]	@ movhi
1147:Core/Src/stm32f4xx_flash.c ****     }
1148:Core/Src/stm32f4xx_flash.c ****     else
1149:Core/Src/stm32f4xx_flash.c ****     {
1150:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1151:Core/Src/stm32f4xx_flash.c ****     }
1152:Core/Src/stm32f4xx_flash.c ****   }
1153:Core/Src/stm32f4xx_flash.c **** }
 1746              		.loc 1 1153 1
 1747 0036 0AE0     		b	.L118
 1748              	.L117:
1150:Core/Src/stm32f4xx_flash.c ****     }
 1749              		.loc 1 1150 44
 1750 0038 074B     		ldr	r3, .L119
 1751 003a 1B88     		ldrh	r3, [r3]	@ movhi
 1752 003c 9AB2     		uxth	r2, r3
 1753 003e 7B68     		ldr	r3, [r7, #4]
 1754 0040 9BB2     		uxth	r3, r3
 1755 0042 DB43     		mvns	r3, r3
 1756 0044 9BB2     		uxth	r3, r3
 1757 0046 0449     		ldr	r1, .L119
 1758 0048 1340     		ands	r3, r3, r2
 1759 004a 9BB2     		uxth	r3, r3
 1760 004c 0B80     		strh	r3, [r1]	@ movhi
 1761              	.L118:
 1762              		.loc 1 1153 1
 1763 004e 00BF     		nop
 1764 0050 1037     		adds	r7, r7, #16
 1765              	.LCFI107:
 1766              		.cfi_def_cfa_offset 8
 1767 0052 BD46     		mov	sp, r7
 1768              	.LCFI108:
 1769              		.cfi_def_cfa_register 13
 1770              		@ sp needed
 1771 0054 80BD     		pop	{r7, pc}
 1772              	.L120:
 1773 0056 00BF     		.align	2
 1774              	.L119:
 1775 0058 163C0240 		.word	1073888278
 1776              		.cfi_endproc
 1777              	.LFE260:
 1779              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1780              		.align	1
 1781              		.global	FLASH_OB_PCROP1Config
 1782              		.syntax unified
 1783              		.thumb
 1784              		.thumb_func
 1786              	FLASH_OB_PCROP1Config:
 1787              	.LFB261:
1154:Core/Src/stm32f4xx_flash.c ****  
1155:Core/Src/stm32f4xx_flash.c **** /**
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 52


1156:Core/Src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1157:Core/Src/stm32f4xx_flash.c ****   *         sectors
1158:Core/Src/stm32f4xx_flash.c ****   *           
1159:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1160:Core/Src/stm32f4xx_flash.c ****   *   
1161:Core/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1162:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1163:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1164:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1165:Core/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1166:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1167:Core/Src/stm32f4xx_flash.c ****   * @retval None  
1168:Core/Src/stm32f4xx_flash.c ****   */
1169:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1170:Core/Src/stm32f4xx_flash.c **** { 
 1788              		.loc 1 1170 1
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 16
 1791              		@ frame_needed = 1, uses_anonymous_args = 0
 1792 0000 80B5     		push	{r7, lr}
 1793              	.LCFI109:
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 7, -8
 1796              		.cfi_offset 14, -4
 1797 0002 84B0     		sub	sp, sp, #16
 1798              	.LCFI110:
 1799              		.cfi_def_cfa_offset 24
 1800 0004 00AF     		add	r7, sp, #0
 1801              	.LCFI111:
 1802              		.cfi_def_cfa_register 7
 1803 0006 7860     		str	r0, [r7, #4]
 1804 0008 0B46     		mov	r3, r1
 1805 000a FB70     		strb	r3, [r7, #3]
1171:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1806              		.loc 1 1171 16
 1807 000c 0923     		movs	r3, #9
 1808 000e FB73     		strb	r3, [r7, #15]
1172:Core/Src/stm32f4xx_flash.c ****   
1173:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1174:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1175:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1176:Core/Src/stm32f4xx_flash.c ****     
1177:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1809              		.loc 1 1177 12
 1810 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1811 0014 0346     		mov	r3, r0
 1812 0016 FB73     		strb	r3, [r7, #15]
1178:Core/Src/stm32f4xx_flash.c ****  
1179:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1813              		.loc 1 1179 5
 1814 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1815 001a 092B     		cmp	r3, #9
 1816 001c 17D1     		bne	.L124
1180:Core/Src/stm32f4xx_flash.c ****   { 
1181:Core/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1817              		.loc 1 1181 7
 1818 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 53


 1819 0020 002B     		cmp	r3, #0
 1820 0022 09D0     		beq	.L123
1182:Core/Src/stm32f4xx_flash.c ****     {
1183:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 1821              		.loc 1 1183 45
 1822 0024 0C4B     		ldr	r3, .L125
 1823 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1824 0028 9AB2     		uxth	r2, r3
 1825              		.loc 1 1183 48
 1826 002a 7B68     		ldr	r3, [r7, #4]
 1827 002c 9BB2     		uxth	r3, r3
 1828              		.loc 1 1183 45
 1829 002e 0A49     		ldr	r1, .L125
 1830 0030 1343     		orrs	r3, r3, r2
 1831 0032 9BB2     		uxth	r3, r3
 1832 0034 0B80     		strh	r3, [r1]	@ movhi
1184:Core/Src/stm32f4xx_flash.c ****     }
1185:Core/Src/stm32f4xx_flash.c ****     else
1186:Core/Src/stm32f4xx_flash.c ****     {
1187:Core/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1188:Core/Src/stm32f4xx_flash.c ****     }
1189:Core/Src/stm32f4xx_flash.c ****   }
1190:Core/Src/stm32f4xx_flash.c **** }
 1833              		.loc 1 1190 1
 1834 0036 0AE0     		b	.L124
 1835              	.L123:
1187:Core/Src/stm32f4xx_flash.c ****     }
 1836              		.loc 1 1187 45
 1837 0038 074B     		ldr	r3, .L125
 1838 003a 1B88     		ldrh	r3, [r3]	@ movhi
 1839 003c 9AB2     		uxth	r2, r3
 1840 003e 7B68     		ldr	r3, [r7, #4]
 1841 0040 9BB2     		uxth	r3, r3
 1842 0042 DB43     		mvns	r3, r3
 1843 0044 9BB2     		uxth	r3, r3
 1844 0046 0449     		ldr	r1, .L125
 1845 0048 1340     		ands	r3, r3, r2
 1846 004a 9BB2     		uxth	r3, r3
 1847 004c 0B80     		strh	r3, [r1]	@ movhi
 1848              	.L124:
 1849              		.loc 1 1190 1
 1850 004e 00BF     		nop
 1851 0050 1037     		adds	r7, r7, #16
 1852              	.LCFI112:
 1853              		.cfi_def_cfa_offset 8
 1854 0052 BD46     		mov	sp, r7
 1855              	.LCFI113:
 1856              		.cfi_def_cfa_register 13
 1857              		@ sp needed
 1858 0054 80BD     		pop	{r7, pc}
 1859              	.L126:
 1860 0056 00BF     		.align	2
 1861              	.L125:
 1862 0058 1A3C0240 		.word	1073888282
 1863              		.cfi_endproc
 1864              	.LFE261:
 1866              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 54


 1867              		.align	1
 1868              		.global	FLASH_OB_RDPConfig
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1873              	FLASH_OB_RDPConfig:
 1874              	.LFB262:
1191:Core/Src/stm32f4xx_flash.c ****  
1192:Core/Src/stm32f4xx_flash.c ****  
1193:Core/Src/stm32f4xx_flash.c **** /**
1194:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1195:Core/Src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1196:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1197:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1198:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1199:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1200:Core/Src/stm32f4xx_flash.c ****   *   
1201:Core/Src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1202:Core/Src/stm32f4xx_flash.c ****   *    
1203:Core/Src/stm32f4xx_flash.c ****   * @retval None
1204:Core/Src/stm32f4xx_flash.c ****   */
1205:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1206:Core/Src/stm32f4xx_flash.c **** {
 1875              		.loc 1 1206 1
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 16
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879 0000 80B5     		push	{r7, lr}
 1880              	.LCFI114:
 1881              		.cfi_def_cfa_offset 8
 1882              		.cfi_offset 7, -8
 1883              		.cfi_offset 14, -4
 1884 0002 84B0     		sub	sp, sp, #16
 1885              	.LCFI115:
 1886              		.cfi_def_cfa_offset 24
 1887 0004 00AF     		add	r7, sp, #0
 1888              	.LCFI116:
 1889              		.cfi_def_cfa_register 7
 1890 0006 0346     		mov	r3, r0
 1891 0008 FB71     		strb	r3, [r7, #7]
1207:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 1892              		.loc 1 1207 16
 1893 000a 0923     		movs	r3, #9
 1894 000c FB73     		strb	r3, [r7, #15]
1208:Core/Src/stm32f4xx_flash.c ****  
1209:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1210:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1211:Core/Src/stm32f4xx_flash.c ****  
1212:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1895              		.loc 1 1212 12
 1896 000e FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1897 0012 0346     		mov	r3, r0
 1898 0014 FB73     		strb	r3, [r7, #15]
1213:Core/Src/stm32f4xx_flash.c ****  
1214:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1899              		.loc 1 1214 5
 1900 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 55


 1901 0018 092B     		cmp	r3, #9
 1902 001a 02D1     		bne	.L129
1215:Core/Src/stm32f4xx_flash.c ****   {
1216:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 1903              		.loc 1 1216 5
 1904 001c 034A     		ldr	r2, .L130
 1905              		.loc 1 1216 41
 1906 001e FB79     		ldrb	r3, [r7, #7]
 1907 0020 1370     		strb	r3, [r2]
 1908              	.L129:
1217:Core/Src/stm32f4xx_flash.c ****  
1218:Core/Src/stm32f4xx_flash.c ****   }
1219:Core/Src/stm32f4xx_flash.c **** }
 1909              		.loc 1 1219 1
 1910 0022 00BF     		nop
 1911 0024 1037     		adds	r7, r7, #16
 1912              	.LCFI117:
 1913              		.cfi_def_cfa_offset 8
 1914 0026 BD46     		mov	sp, r7
 1915              	.LCFI118:
 1916              		.cfi_def_cfa_register 13
 1917              		@ sp needed
 1918 0028 80BD     		pop	{r7, pc}
 1919              	.L131:
 1920 002a 00BF     		.align	2
 1921              	.L130:
 1922 002c 153C0240 		.word	1073888277
 1923              		.cfi_endproc
 1924              	.LFE262:
 1926              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1927              		.align	1
 1928              		.global	FLASH_OB_UserConfig
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1933              	FLASH_OB_UserConfig:
 1934              	.LFB263:
1220:Core/Src/stm32f4xx_flash.c ****  
1221:Core/Src/stm32f4xx_flash.c **** /**
1222:Core/Src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1223:Core/Src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1224:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1225:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1226:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1227:Core/Src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1228:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1229:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1230:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1231:Core/Src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1232:Core/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1233:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1234:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1235:Core/Src/stm32f4xx_flash.c ****   * @retval None
1236:Core/Src/stm32f4xx_flash.c ****   */
1237:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1238:Core/Src/stm32f4xx_flash.c **** {
 1935              		.loc 1 1238 1
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 56


 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 16
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939 0000 80B5     		push	{r7, lr}
 1940              	.LCFI119:
 1941              		.cfi_def_cfa_offset 8
 1942              		.cfi_offset 7, -8
 1943              		.cfi_offset 14, -4
 1944 0002 84B0     		sub	sp, sp, #16
 1945              	.LCFI120:
 1946              		.cfi_def_cfa_offset 24
 1947 0004 00AF     		add	r7, sp, #0
 1948              	.LCFI121:
 1949              		.cfi_def_cfa_register 7
 1950 0006 0346     		mov	r3, r0
 1951 0008 FB71     		strb	r3, [r7, #7]
 1952 000a 0B46     		mov	r3, r1
 1953 000c BB71     		strb	r3, [r7, #6]
 1954 000e 1346     		mov	r3, r2
 1955 0010 7B71     		strb	r3, [r7, #5]
1239:Core/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1956              		.loc 1 1239 11
 1957 0012 FF23     		movs	r3, #255
 1958 0014 FB73     		strb	r3, [r7, #15]
1240:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2; 
 1959              		.loc 1 1240 16
 1960 0016 0923     		movs	r3, #9
 1961 0018 BB73     		strb	r3, [r7, #14]
1241:Core/Src/stm32f4xx_flash.c ****  
1242:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1243:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1244:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1245:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1246:Core/Src/stm32f4xx_flash.c ****  
1247:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1248:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 1962              		.loc 1 1248 12
 1963 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 1964 001e 0346     		mov	r3, r0
 1965 0020 BB73     		strb	r3, [r7, #14]
1249:Core/Src/stm32f4xx_flash.c ****   
1250:Core/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE2)
 1966              		.loc 1 1250 5
 1967 0022 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1968 0024 092B     		cmp	r3, #9
 1969 0026 11D1     		bne	.L134
1251:Core/Src/stm32f4xx_flash.c ****   { 
1252:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
1253:Core/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1254:Core/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1255:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
1256:Core/Src/stm32f4xx_flash.c ****  
1257:Core/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
1258:Core/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1259:Core/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 1970              		.loc 1 1259 67
 1971 0028 0A4B     		ldr	r3, .L135
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 57


 1972 002a 1B78     		ldrb	r3, [r3]
 1973 002c DBB2     		uxtb	r3, r3
 1974              		.loc 1 1259 15
 1975 002e 03F00F03 		and	r3, r3, #15
 1976 0032 FB73     		strb	r3, [r7, #15]
1260:Core/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
1261:Core/Src/stm32f4xx_flash.c ****  
1262:Core/Src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1263:Core/Src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
 1977              		.loc 1 1263 75
 1978 0034 BA79     		ldrb	r2, [r7, #6]
 1979 0036 FB7B     		ldrb	r3, [r7, #15]
 1980 0038 1343     		orrs	r3, r3, r2
 1981 003a DAB2     		uxtb	r2, r3
 1982              		.loc 1 1263 54
 1983 003c 7B79     		ldrb	r3, [r7, #5]
 1984 003e 1343     		orrs	r3, r3, r2
 1985 0040 DAB2     		uxtb	r2, r3
 1986              		.loc 1 1263 5
 1987 0042 0449     		ldr	r1, .L135
 1988              		.loc 1 1263 42
 1989 0044 FB79     		ldrb	r3, [r7, #7]
 1990 0046 1343     		orrs	r3, r3, r2
 1991 0048 DBB2     		uxtb	r3, r3
 1992 004a 0B70     		strb	r3, [r1]
 1993              	.L134:
1264:Core/Src/stm32f4xx_flash.c ****   }  
1265:Core/Src/stm32f4xx_flash.c **** }
 1994              		.loc 1 1265 1
 1995 004c 00BF     		nop
 1996 004e 1037     		adds	r7, r7, #16
 1997              	.LCFI122:
 1998              		.cfi_def_cfa_offset 8
 1999 0050 BD46     		mov	sp, r7
 2000              	.LCFI123:
 2001              		.cfi_def_cfa_register 13
 2002              		@ sp needed
 2003 0052 80BD     		pop	{r7, pc}
 2004              	.L136:
 2005              		.align	2
 2006              	.L135:
 2007 0054 143C0240 		.word	1073888276
 2008              		.cfi_endproc
 2009              	.LFE263:
 2011              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 2012              		.align	1
 2013              		.global	FLASH_OB_BootConfig
 2014              		.syntax unified
 2015              		.thumb
 2016              		.thumb_func
 2018              	FLASH_OB_BootConfig:
 2019              	.LFB264:
1266:Core/Src/stm32f4xx_flash.c ****  
1267:Core/Src/stm32f4xx_flash.c **** /**
1268:Core/Src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1269:Core/Src/stm32f4xx_flash.c ****   *   
1270:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 58


1271:Core/Src/stm32f4xx_flash.c ****   *      
1272:Core/Src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1273:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1274:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1275:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1276:Core/Src/stm32f4xx_flash.c ****   * @retval None
1277:Core/Src/stm32f4xx_flash.c ****   */
1278:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1279:Core/Src/stm32f4xx_flash.c **** {
 2020              		.loc 1 1279 1
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 8
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024              		@ link register save eliminated.
 2025 0000 80B4     		push	{r7}
 2026              	.LCFI124:
 2027              		.cfi_def_cfa_offset 4
 2028              		.cfi_offset 7, -4
 2029 0002 83B0     		sub	sp, sp, #12
 2030              	.LCFI125:
 2031              		.cfi_def_cfa_offset 16
 2032 0004 00AF     		add	r7, sp, #0
 2033              	.LCFI126:
 2034              		.cfi_def_cfa_register 7
 2035 0006 0346     		mov	r3, r0
 2036 0008 FB71     		strb	r3, [r7, #7]
1280:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1281:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
1282:Core/Src/stm32f4xx_flash.c ****  
1283:Core/Src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1284:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 2037              		.loc 1 1284 40
 2038 000a 0B4B     		ldr	r3, .L138
 2039 000c 1B78     		ldrb	r3, [r3]
 2040 000e DBB2     		uxtb	r3, r3
 2041 0010 094A     		ldr	r2, .L138
 2042 0012 23F01003 		bic	r3, r3, #16
 2043 0016 DBB2     		uxtb	r3, r3
 2044 0018 1370     		strb	r3, [r2]
1285:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 2045              		.loc 1 1285 40
 2046 001a 074B     		ldr	r3, .L138
 2047 001c 1B78     		ldrb	r3, [r3]
 2048 001e DAB2     		uxtb	r2, r3
 2049 0020 0549     		ldr	r1, .L138
 2050 0022 FB79     		ldrb	r3, [r7, #7]
 2051 0024 1343     		orrs	r3, r3, r2
 2052 0026 DBB2     		uxtb	r3, r3
 2053 0028 0B70     		strb	r3, [r1]
1286:Core/Src/stm32f4xx_flash.c ****  
1287:Core/Src/stm32f4xx_flash.c **** }
 2054              		.loc 1 1287 1
 2055 002a 00BF     		nop
 2056 002c 0C37     		adds	r7, r7, #12
 2057              	.LCFI127:
 2058              		.cfi_def_cfa_offset 4
 2059 002e BD46     		mov	sp, r7
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 59


 2060              	.LCFI128:
 2061              		.cfi_def_cfa_register 13
 2062              		@ sp needed
 2063 0030 5DF8047B 		ldr	r7, [sp], #4
 2064              	.LCFI129:
 2065              		.cfi_restore 7
 2066              		.cfi_def_cfa_offset 0
 2067 0034 7047     		bx	lr
 2068              	.L139:
 2069 0036 00BF     		.align	2
 2070              	.L138:
 2071 0038 143C0240 		.word	1073888276
 2072              		.cfi_endproc
 2073              	.LFE264:
 2075              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 2076              		.align	1
 2077              		.global	FLASH_OB_BORConfig
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2082              	FLASH_OB_BORConfig:
 2083              	.LFB265:
1288:Core/Src/stm32f4xx_flash.c ****  
1289:Core/Src/stm32f4xx_flash.c **** /**
1290:Core/Src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1291:Core/Src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1292:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1293:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1294:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1295:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1296:Core/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1297:Core/Src/stm32f4xx_flash.c ****   * @retval None
1298:Core/Src/stm32f4xx_flash.c ****   */
1299:Core/Src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1300:Core/Src/stm32f4xx_flash.c **** {
 2084              		.loc 1 1300 1
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 8
 2087              		@ frame_needed = 1, uses_anonymous_args = 0
 2088              		@ link register save eliminated.
 2089 0000 80B4     		push	{r7}
 2090              	.LCFI130:
 2091              		.cfi_def_cfa_offset 4
 2092              		.cfi_offset 7, -4
 2093 0002 83B0     		sub	sp, sp, #12
 2094              	.LCFI131:
 2095              		.cfi_def_cfa_offset 16
 2096 0004 00AF     		add	r7, sp, #0
 2097              	.LCFI132:
 2098              		.cfi_def_cfa_register 7
 2099 0006 0346     		mov	r3, r0
 2100 0008 FB71     		strb	r3, [r7, #7]
1301:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1302:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1303:Core/Src/stm32f4xx_flash.c ****  
1304:Core/Src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1305:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 60


 2101              		.loc 1 1305 40
 2102 000a 0B4B     		ldr	r3, .L141
 2103 000c 1B78     		ldrb	r3, [r3]
 2104 000e DBB2     		uxtb	r3, r3
 2105 0010 094A     		ldr	r2, .L141
 2106 0012 23F00C03 		bic	r3, r3, #12
 2107 0016 DBB2     		uxtb	r3, r3
 2108 0018 1370     		strb	r3, [r2]
1306:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 2109              		.loc 1 1306 40
 2110 001a 074B     		ldr	r3, .L141
 2111 001c 1B78     		ldrb	r3, [r3]
 2112 001e DAB2     		uxtb	r2, r3
 2113 0020 0549     		ldr	r1, .L141
 2114 0022 FB79     		ldrb	r3, [r7, #7]
 2115 0024 1343     		orrs	r3, r3, r2
 2116 0026 DBB2     		uxtb	r3, r3
 2117 0028 0B70     		strb	r3, [r1]
1307:Core/Src/stm32f4xx_flash.c ****  
1308:Core/Src/stm32f4xx_flash.c **** }
 2118              		.loc 1 1308 1
 2119 002a 00BF     		nop
 2120 002c 0C37     		adds	r7, r7, #12
 2121              	.LCFI133:
 2122              		.cfi_def_cfa_offset 4
 2123 002e BD46     		mov	sp, r7
 2124              	.LCFI134:
 2125              		.cfi_def_cfa_register 13
 2126              		@ sp needed
 2127 0030 5DF8047B 		ldr	r7, [sp], #4
 2128              	.LCFI135:
 2129              		.cfi_restore 7
 2130              		.cfi_def_cfa_offset 0
 2131 0034 7047     		bx	lr
 2132              	.L142:
 2133 0036 00BF     		.align	2
 2134              	.L141:
 2135 0038 143C0240 		.word	1073888276
 2136              		.cfi_endproc
 2137              	.LFE265:
 2139              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 2140              		.align	1
 2141              		.global	FLASH_OB_Launch
 2142              		.syntax unified
 2143              		.thumb
 2144              		.thumb_func
 2146              	FLASH_OB_Launch:
 2147              	.LFB266:
1309:Core/Src/stm32f4xx_flash.c ****  
1310:Core/Src/stm32f4xx_flash.c **** /**
1311:Core/Src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1312:Core/Src/stm32f4xx_flash.c ****   * @param  None
1313:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
1314:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
1315:Core/Src/stm32f4xx_flash.c ****   */
1316:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1317:Core/Src/stm32f4xx_flash.c **** {
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 61


 2148              		.loc 1 1317 1
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 8
 2151              		@ frame_needed = 1, uses_anonymous_args = 0
 2152 0000 80B5     		push	{r7, lr}
 2153              	.LCFI136:
 2154              		.cfi_def_cfa_offset 8
 2155              		.cfi_offset 7, -8
 2156              		.cfi_offset 14, -4
 2157 0002 82B0     		sub	sp, sp, #8
 2158              	.LCFI137:
 2159              		.cfi_def_cfa_offset 16
 2160 0004 00AF     		add	r7, sp, #0
 2161              	.LCFI138:
 2162              		.cfi_def_cfa_register 7
1318:Core/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE2;
 2163              		.loc 1 1318 16
 2164 0006 0923     		movs	r3, #9
 2165 0008 FB71     		strb	r3, [r7, #7]
1319:Core/Src/stm32f4xx_flash.c ****  
1320:Core/Src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1321:Core/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 2166              		.loc 1 1321 40
 2167 000a 084B     		ldr	r3, .L145
 2168 000c 1B78     		ldrb	r3, [r3]
 2169 000e DBB2     		uxtb	r3, r3
 2170 0010 064A     		ldr	r2, .L145
 2171 0012 43F00203 		orr	r3, r3, #2
 2172 0016 DBB2     		uxtb	r3, r3
 2173 0018 1370     		strb	r3, [r2]
1322:Core/Src/stm32f4xx_flash.c ****  
1323:Core/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1324:Core/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation2();
 2174              		.loc 1 1324 12
 2175 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation2
 2176 001e 0346     		mov	r3, r0
 2177 0020 FB71     		strb	r3, [r7, #7]
1325:Core/Src/stm32f4xx_flash.c ****  
1326:Core/Src/stm32f4xx_flash.c ****   return status;
 2178              		.loc 1 1326 10
 2179 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1327:Core/Src/stm32f4xx_flash.c **** }
 2180              		.loc 1 1327 1
 2181 0024 1846     		mov	r0, r3
 2182 0026 0837     		adds	r7, r7, #8
 2183              	.LCFI139:
 2184              		.cfi_def_cfa_offset 8
 2185 0028 BD46     		mov	sp, r7
 2186              	.LCFI140:
 2187              		.cfi_def_cfa_register 13
 2188              		@ sp needed
 2189 002a 80BD     		pop	{r7, pc}
 2190              	.L146:
 2191              		.align	2
 2192              	.L145:
 2193 002c 143C0240 		.word	1073888276
 2194              		.cfi_endproc
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 62


 2195              	.LFE266:
 2197              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 2198              		.align	1
 2199              		.global	FLASH_OB_GetUser
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2204              	FLASH_OB_GetUser:
 2205              	.LFB267:
1328:Core/Src/stm32f4xx_flash.c ****  
1329:Core/Src/stm32f4xx_flash.c **** /**
1330:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1331:Core/Src/stm32f4xx_flash.c ****   * @param  None
1332:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1333:Core/Src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1334:Core/Src/stm32f4xx_flash.c ****   */
1335:Core/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1336:Core/Src/stm32f4xx_flash.c **** {
 2206              		.loc 1 1336 1
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 2211 0000 80B4     		push	{r7}
 2212              	.LCFI141:
 2213              		.cfi_def_cfa_offset 4
 2214              		.cfi_offset 7, -4
 2215 0002 00AF     		add	r7, sp, #0
 2216              	.LCFI142:
 2217              		.cfi_def_cfa_register 7
1337:Core/Src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1338:Core/Src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 2218              		.loc 1 1338 25
 2219 0004 044B     		ldr	r3, .L149
 2220 0006 5B69     		ldr	r3, [r3, #20]
 2221              		.loc 1 1338 33
 2222 0008 5B09     		lsrs	r3, r3, #5
 2223              		.loc 1 1338 10
 2224 000a DBB2     		uxtb	r3, r3
1339:Core/Src/stm32f4xx_flash.c **** }
 2225              		.loc 1 1339 1
 2226 000c 1846     		mov	r0, r3
 2227 000e BD46     		mov	sp, r7
 2228              	.LCFI143:
 2229              		.cfi_def_cfa_register 13
 2230              		@ sp needed
 2231 0010 5DF8047B 		ldr	r7, [sp], #4
 2232              	.LCFI144:
 2233              		.cfi_restore 7
 2234              		.cfi_def_cfa_offset 0
 2235 0014 7047     		bx	lr
 2236              	.L150:
 2237 0016 00BF     		.align	2
 2238              	.L149:
 2239 0018 003C0240 		.word	1073888256
 2240              		.cfi_endproc
 2241              	.LFE267:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 63


 2243              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 2244              		.align	1
 2245              		.global	FLASH_OB_GetWRP
 2246              		.syntax unified
 2247              		.thumb
 2248              		.thumb_func
 2250              	FLASH_OB_GetWRP:
 2251              	.LFB268:
1340:Core/Src/stm32f4xx_flash.c ****  
1341:Core/Src/stm32f4xx_flash.c **** /**
1342:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1343:Core/Src/stm32f4xx_flash.c ****   * @param  None
1344:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1345:Core/Src/stm32f4xx_flash.c ****   */
1346:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1347:Core/Src/stm32f4xx_flash.c **** {
 2252              		.loc 1 1347 1
 2253              		.cfi_startproc
 2254              		@ args = 0, pretend = 0, frame = 0
 2255              		@ frame_needed = 1, uses_anonymous_args = 0
 2256              		@ link register save eliminated.
 2257 0000 80B4     		push	{r7}
 2258              	.LCFI145:
 2259              		.cfi_def_cfa_offset 4
 2260              		.cfi_offset 7, -4
 2261 0002 00AF     		add	r7, sp, #0
 2262              	.LCFI146:
 2263              		.cfi_def_cfa_register 7
1348:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1349:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 2264              		.loc 1 1349 11
 2265 0004 034B     		ldr	r3, .L153
 2266 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2267 0008 9BB2     		uxth	r3, r3
1350:Core/Src/stm32f4xx_flash.c **** }
 2268              		.loc 1 1350 1
 2269 000a 1846     		mov	r0, r3
 2270 000c BD46     		mov	sp, r7
 2271              	.LCFI147:
 2272              		.cfi_def_cfa_register 13
 2273              		@ sp needed
 2274 000e 5DF8047B 		ldr	r7, [sp], #4
 2275              	.LCFI148:
 2276              		.cfi_restore 7
 2277              		.cfi_def_cfa_offset 0
 2278 0012 7047     		bx	lr
 2279              	.L154:
 2280              		.align	2
 2281              	.L153:
 2282 0014 163C0240 		.word	1073888278
 2283              		.cfi_endproc
 2284              	.LFE268:
 2286              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 2287              		.align	1
 2288              		.global	FLASH_OB_GetWRP1
 2289              		.syntax unified
 2290              		.thumb
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 64


 2291              		.thumb_func
 2293              	FLASH_OB_GetWRP1:
 2294              	.LFB269:
1351:Core/Src/stm32f4xx_flash.c ****  
1352:Core/Src/stm32f4xx_flash.c **** /**
1353:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1354:Core/Src/stm32f4xx_flash.c ****   *   
1355:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1356:Core/Src/stm32f4xx_flash.c ****   *   
1357:Core/Src/stm32f4xx_flash.c ****   * @param  None
1358:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1359:Core/Src/stm32f4xx_flash.c ****   */
1360:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1361:Core/Src/stm32f4xx_flash.c **** {
 2295              		.loc 1 1361 1
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 0
 2298              		@ frame_needed = 1, uses_anonymous_args = 0
 2299              		@ link register save eliminated.
 2300 0000 80B4     		push	{r7}
 2301              	.LCFI149:
 2302              		.cfi_def_cfa_offset 4
 2303              		.cfi_offset 7, -4
 2304 0002 00AF     		add	r7, sp, #0
 2305              	.LCFI150:
 2306              		.cfi_def_cfa_register 7
1362:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1363:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 2307              		.loc 1 1363 11
 2308 0004 034B     		ldr	r3, .L157
 2309 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2310 0008 9BB2     		uxth	r3, r3
1364:Core/Src/stm32f4xx_flash.c **** }
 2311              		.loc 1 1364 1
 2312 000a 1846     		mov	r0, r3
 2313 000c BD46     		mov	sp, r7
 2314              	.LCFI151:
 2315              		.cfi_def_cfa_register 13
 2316              		@ sp needed
 2317 000e 5DF8047B 		ldr	r7, [sp], #4
 2318              	.LCFI152:
 2319              		.cfi_restore 7
 2320              		.cfi_def_cfa_offset 0
 2321 0012 7047     		bx	lr
 2322              	.L158:
 2323              		.align	2
 2324              	.L157:
 2325 0014 1A3C0240 		.word	1073888282
 2326              		.cfi_endproc
 2327              	.LFE269:
 2329              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 2330              		.align	1
 2331              		.global	FLASH_OB_GetPCROP
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2336              	FLASH_OB_GetPCROP:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 65


 2337              	.LFB270:
1365:Core/Src/stm32f4xx_flash.c ****  
1366:Core/Src/stm32f4xx_flash.c **** /**
1367:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1368:Core/Src/stm32f4xx_flash.c ****   *   
1369:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1370:Core/Src/stm32f4xx_flash.c ****   *   
1371:Core/Src/stm32f4xx_flash.c ****   * @param  None
1372:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1373:Core/Src/stm32f4xx_flash.c ****   */
1374:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1375:Core/Src/stm32f4xx_flash.c **** {
 2338              		.loc 1 1375 1
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 0
 2341              		@ frame_needed = 1, uses_anonymous_args = 0
 2342              		@ link register save eliminated.
 2343 0000 80B4     		push	{r7}
 2344              	.LCFI153:
 2345              		.cfi_def_cfa_offset 4
 2346              		.cfi_offset 7, -4
 2347 0002 00AF     		add	r7, sp, #0
 2348              	.LCFI154:
 2349              		.cfi_def_cfa_register 7
1376:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1377:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 2350              		.loc 1 1377 11
 2351 0004 034B     		ldr	r3, .L161
 2352 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2353 0008 9BB2     		uxth	r3, r3
1378:Core/Src/stm32f4xx_flash.c **** }
 2354              		.loc 1 1378 1
 2355 000a 1846     		mov	r0, r3
 2356 000c BD46     		mov	sp, r7
 2357              	.LCFI155:
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 000e 5DF8047B 		ldr	r7, [sp], #4
 2361              	.LCFI156:
 2362              		.cfi_restore 7
 2363              		.cfi_def_cfa_offset 0
 2364 0012 7047     		bx	lr
 2365              	.L162:
 2366              		.align	2
 2367              	.L161:
 2368 0014 163C0240 		.word	1073888278
 2369              		.cfi_endproc
 2370              	.LFE270:
 2372              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 2373              		.align	1
 2374              		.global	FLASH_OB_GetPCROP1
 2375              		.syntax unified
 2376              		.thumb
 2377              		.thumb_func
 2379              	FLASH_OB_GetPCROP1:
 2380              	.LFB271:
1379:Core/Src/stm32f4xx_flash.c ****  
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 66


1380:Core/Src/stm32f4xx_flash.c **** /**
1381:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1382:Core/Src/stm32f4xx_flash.c ****   *   
1383:Core/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1384:Core/Src/stm32f4xx_flash.c ****   *     
1385:Core/Src/stm32f4xx_flash.c ****   * @param  None
1386:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1387:Core/Src/stm32f4xx_flash.c ****   */
1388:Core/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1389:Core/Src/stm32f4xx_flash.c **** {
 2381              		.loc 1 1389 1
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 1, uses_anonymous_args = 0
 2385              		@ link register save eliminated.
 2386 0000 80B4     		push	{r7}
 2387              	.LCFI157:
 2388              		.cfi_def_cfa_offset 4
 2389              		.cfi_offset 7, -4
 2390 0002 00AF     		add	r7, sp, #0
 2391              	.LCFI158:
 2392              		.cfi_def_cfa_register 7
1390:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1391:Core/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 2393              		.loc 1 1391 11
 2394 0004 034B     		ldr	r3, .L165
 2395 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2396 0008 9BB2     		uxth	r3, r3
1392:Core/Src/stm32f4xx_flash.c **** }
 2397              		.loc 1 1392 1
 2398 000a 1846     		mov	r0, r3
 2399 000c BD46     		mov	sp, r7
 2400              	.LCFI159:
 2401              		.cfi_def_cfa_register 13
 2402              		@ sp needed
 2403 000e 5DF8047B 		ldr	r7, [sp], #4
 2404              	.LCFI160:
 2405              		.cfi_restore 7
 2406              		.cfi_def_cfa_offset 0
 2407 0012 7047     		bx	lr
 2408              	.L166:
 2409              		.align	2
 2410              	.L165:
 2411 0014 1A3C0240 		.word	1073888282
 2412              		.cfi_endproc
 2413              	.LFE271:
 2415              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 2416              		.align	1
 2417              		.global	FLASH_OB_GetRDP
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2422              	FLASH_OB_GetRDP:
 2423              	.LFB272:
1393:Core/Src/stm32f4xx_flash.c ****  
1394:Core/Src/stm32f4xx_flash.c **** /**
1395:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 67


1396:Core/Src/stm32f4xx_flash.c ****   * @param  None
1397:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1398:Core/Src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1399:Core/Src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1400:Core/Src/stm32f4xx_flash.c ****   */
1401:Core/Src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1402:Core/Src/stm32f4xx_flash.c **** {
 2424              		.loc 1 1402 1
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 8
 2427              		@ frame_needed = 1, uses_anonymous_args = 0
 2428              		@ link register save eliminated.
 2429 0000 80B4     		push	{r7}
 2430              	.LCFI161:
 2431              		.cfi_def_cfa_offset 4
 2432              		.cfi_offset 7, -4
 2433 0002 83B0     		sub	sp, sp, #12
 2434              	.LCFI162:
 2435              		.cfi_def_cfa_offset 16
 2436 0004 00AF     		add	r7, sp, #0
 2437              	.LCFI163:
 2438              		.cfi_def_cfa_register 7
1403:Core/Src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
 2439              		.loc 1 1403 14
 2440 0006 0023     		movs	r3, #0
 2441 0008 FB71     		strb	r3, [r7, #7]
1404:Core/Src/stm32f4xx_flash.c ****  
1405:Core/Src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 2442              		.loc 1 1405 8
 2443 000a 084B     		ldr	r3, .L171
 2444 000c 1B78     		ldrb	r3, [r3]
 2445 000e DBB2     		uxtb	r3, r3
 2446              		.loc 1 1405 6
 2447 0010 AA2B     		cmp	r3, #170
 2448 0012 02D0     		beq	.L168
1406:Core/Src/stm32f4xx_flash.c ****   {
1407:Core/Src/stm32f4xx_flash.c ****     readstatus = SET;
 2449              		.loc 1 1407 16
 2450 0014 0123     		movs	r3, #1
 2451 0016 FB71     		strb	r3, [r7, #7]
 2452 0018 01E0     		b	.L169
 2453              	.L168:
1408:Core/Src/stm32f4xx_flash.c ****   }
1409:Core/Src/stm32f4xx_flash.c ****   else
1410:Core/Src/stm32f4xx_flash.c ****   {
1411:Core/Src/stm32f4xx_flash.c ****     readstatus = RESET;
 2454              		.loc 1 1411 16
 2455 001a 0023     		movs	r3, #0
 2456 001c FB71     		strb	r3, [r7, #7]
 2457              	.L169:
1412:Core/Src/stm32f4xx_flash.c ****   }
1413:Core/Src/stm32f4xx_flash.c ****   return readstatus;
 2458              		.loc 1 1413 10
 2459 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1414:Core/Src/stm32f4xx_flash.c **** }
 2460              		.loc 1 1414 1
 2461 0020 1846     		mov	r0, r3
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 68


 2462 0022 0C37     		adds	r7, r7, #12
 2463              	.LCFI164:
 2464              		.cfi_def_cfa_offset 4
 2465 0024 BD46     		mov	sp, r7
 2466              	.LCFI165:
 2467              		.cfi_def_cfa_register 13
 2468              		@ sp needed
 2469 0026 5DF8047B 		ldr	r7, [sp], #4
 2470              	.LCFI166:
 2471              		.cfi_restore 7
 2472              		.cfi_def_cfa_offset 0
 2473 002a 7047     		bx	lr
 2474              	.L172:
 2475              		.align	2
 2476              	.L171:
 2477 002c 153C0240 		.word	1073888277
 2478              		.cfi_endproc
 2479              	.LFE272:
 2481              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 2482              		.align	1
 2483              		.global	FLASH_OB_GetBOR
 2484              		.syntax unified
 2485              		.thumb
 2486              		.thumb_func
 2488              	FLASH_OB_GetBOR:
 2489              	.LFB273:
1415:Core/Src/stm32f4xx_flash.c ****  
1416:Core/Src/stm32f4xx_flash.c **** /**
1417:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1418:Core/Src/stm32f4xx_flash.c ****   * @param  None
1419:Core/Src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1420:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1421:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1422:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1423:Core/Src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1424:Core/Src/stm32f4xx_flash.c ****   */
1425:Core/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1426:Core/Src/stm32f4xx_flash.c **** {
 2490              		.loc 1 1426 1
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 1, uses_anonymous_args = 0
 2494              		@ link register save eliminated.
 2495 0000 80B4     		push	{r7}
 2496              	.LCFI167:
 2497              		.cfi_def_cfa_offset 4
 2498              		.cfi_offset 7, -4
 2499 0002 00AF     		add	r7, sp, #0
 2500              	.LCFI168:
 2501              		.cfi_def_cfa_register 7
1427:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1428:Core/Src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 2502              		.loc 1 1428 10
 2503 0004 054B     		ldr	r3, .L175
 2504 0006 1B78     		ldrb	r3, [r3]
 2505 0008 DBB2     		uxtb	r3, r3
 2506 000a 03F00C03 		and	r3, r3, #12
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 69


 2507 000e DBB2     		uxtb	r3, r3
1429:Core/Src/stm32f4xx_flash.c **** }
 2508              		.loc 1 1429 1
 2509 0010 1846     		mov	r0, r3
 2510 0012 BD46     		mov	sp, r7
 2511              	.LCFI169:
 2512              		.cfi_def_cfa_register 13
 2513              		@ sp needed
 2514 0014 5DF8047B 		ldr	r7, [sp], #4
 2515              	.LCFI170:
 2516              		.cfi_restore 7
 2517              		.cfi_def_cfa_offset 0
 2518 0018 7047     		bx	lr
 2519              	.L176:
 2520 001a 00BF     		.align	2
 2521              	.L175:
 2522 001c 143C0240 		.word	1073888276
 2523              		.cfi_endproc
 2524              	.LFE273:
 2526              		.section	.text.FLASH_ITConfig,"ax",%progbits
 2527              		.align	1
 2528              		.global	FLASH_ITConfig
 2529              		.syntax unified
 2530              		.thumb
 2531              		.thumb_func
 2533              	FLASH_ITConfig:
 2534              	.LFB274:
1430:Core/Src/stm32f4xx_flash.c ****  
1431:Core/Src/stm32f4xx_flash.c **** /**
1432:Core/Src/stm32f4xx_flash.c ****   * @}
1433:Core/Src/stm32f4xx_flash.c ****   */
1434:Core/Src/stm32f4xx_flash.c ****  
1435:Core/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1436:Core/Src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1437:Core/Src/stm32f4xx_flash.c ****  *
1438:Core/Src/stm32f4xx_flash.c **** @verbatim   
1439:Core/Src/stm32f4xx_flash.c ****  ===============================================================================
1440:Core/Src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1441:Core/Src/stm32f4xx_flash.c ****  ===============================================================================  
1442:Core/Src/stm32f4xx_flash.c **** @endverbatim
1443:Core/Src/stm32f4xx_flash.c ****   * @{
1444:Core/Src/stm32f4xx_flash.c ****   */
1445:Core/Src/stm32f4xx_flash.c ****  
1446:Core/Src/stm32f4xx_flash.c **** /**
1447:Core/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1448:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1449:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1450:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1451:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1452:Core/Src/stm32f4xx_flash.c ****   * @retval None 
1453:Core/Src/stm32f4xx_flash.c ****   */
1454:Core/Src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1455:Core/Src/stm32f4xx_flash.c **** {
 2535              		.loc 1 1455 1
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 8
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 70


 2539              		@ link register save eliminated.
 2540 0000 80B4     		push	{r7}
 2541              	.LCFI171:
 2542              		.cfi_def_cfa_offset 4
 2543              		.cfi_offset 7, -4
 2544 0002 83B0     		sub	sp, sp, #12
 2545              	.LCFI172:
 2546              		.cfi_def_cfa_offset 16
 2547 0004 00AF     		add	r7, sp, #0
 2548              	.LCFI173:
 2549              		.cfi_def_cfa_register 7
 2550 0006 7860     		str	r0, [r7, #4]
 2551 0008 0B46     		mov	r3, r1
 2552 000a FB70     		strb	r3, [r7, #3]
1456:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1457:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1458:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1459:Core/Src/stm32f4xx_flash.c ****  
1460:Core/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 2553              		.loc 1 1460 5
 2554 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2555 000e 002B     		cmp	r3, #0
 2556 0010 06D0     		beq	.L178
1461:Core/Src/stm32f4xx_flash.c ****   {
1462:Core/Src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1463:Core/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
 2557              		.loc 1 1463 15
 2558 0012 0A4B     		ldr	r3, .L181
 2559 0014 1A69     		ldr	r2, [r3, #16]
 2560 0016 0949     		ldr	r1, .L181
 2561 0018 7B68     		ldr	r3, [r7, #4]
 2562 001a 1343     		orrs	r3, r3, r2
 2563 001c 0B61     		str	r3, [r1, #16]
1464:Core/Src/stm32f4xx_flash.c ****   }
1465:Core/Src/stm32f4xx_flash.c ****   else
1466:Core/Src/stm32f4xx_flash.c ****   {
1467:Core/Src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1468:Core/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
1469:Core/Src/stm32f4xx_flash.c ****   }
1470:Core/Src/stm32f4xx_flash.c **** }
 2564              		.loc 1 1470 1
 2565 001e 06E0     		b	.L180
 2566              	.L178:
1468:Core/Src/stm32f4xx_flash.c ****   }
 2567              		.loc 1 1468 15
 2568 0020 064B     		ldr	r3, .L181
 2569 0022 1A69     		ldr	r2, [r3, #16]
1468:Core/Src/stm32f4xx_flash.c ****   }
 2570              		.loc 1 1468 18
 2571 0024 7B68     		ldr	r3, [r7, #4]
 2572 0026 DB43     		mvns	r3, r3
1468:Core/Src/stm32f4xx_flash.c ****   }
 2573              		.loc 1 1468 15
 2574 0028 0449     		ldr	r1, .L181
 2575 002a 1340     		ands	r3, r3, r2
 2576 002c 0B61     		str	r3, [r1, #16]
 2577              	.L180:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 71


 2578              		.loc 1 1470 1
 2579 002e 00BF     		nop
 2580 0030 0C37     		adds	r7, r7, #12
 2581              	.LCFI174:
 2582              		.cfi_def_cfa_offset 4
 2583 0032 BD46     		mov	sp, r7
 2584              	.LCFI175:
 2585              		.cfi_def_cfa_register 13
 2586              		@ sp needed
 2587 0034 5DF8047B 		ldr	r7, [sp], #4
 2588              	.LCFI176:
 2589              		.cfi_restore 7
 2590              		.cfi_def_cfa_offset 0
 2591 0038 7047     		bx	lr
 2592              	.L182:
 2593 003a 00BF     		.align	2
 2594              	.L181:
 2595 003c 003C0240 		.word	1073888256
 2596              		.cfi_endproc
 2597              	.LFE274:
 2599              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 2600              		.align	1
 2601              		.global	FLASH_GetFlagStatus
 2602              		.syntax unified
 2603              		.thumb
 2604              		.thumb_func
 2606              	FLASH_GetFlagStatus:
 2607              	.LFB275:
1471:Core/Src/stm32f4xx_flash.c ****  
1472:Core/Src/stm32f4xx_flash.c **** /**
1473:Core/Src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1474:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1475:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1476:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1477:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1478:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1479:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1480:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1481:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1482:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1483:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1484:Core/Src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1485:Core/Src/stm32f4xx_flash.c ****   */
1486:Core/Src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1487:Core/Src/stm32f4xx_flash.c **** {
 2608              		.loc 1 1487 1
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 16
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612              		@ link register save eliminated.
 2613 0000 80B4     		push	{r7}
 2614              	.LCFI177:
 2615              		.cfi_def_cfa_offset 4
 2616              		.cfi_offset 7, -4
 2617 0002 85B0     		sub	sp, sp, #20
 2618              	.LCFI178:
 2619              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 72


 2620 0004 00AF     		add	r7, sp, #0
 2621              	.LCFI179:
 2622              		.cfi_def_cfa_register 7
 2623 0006 7860     		str	r0, [r7, #4]
1488:Core/Src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
 2624              		.loc 1 1488 14
 2625 0008 0023     		movs	r3, #0
 2626 000a FB73     		strb	r3, [r7, #15]
1489:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1490:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1491:Core/Src/stm32f4xx_flash.c ****  
1492:Core/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 2627              		.loc 1 1492 12
 2628 000c 084B     		ldr	r3, .L187
 2629 000e DA68     		ldr	r2, [r3, #12]
 2630              		.loc 1 1492 17
 2631 0010 7B68     		ldr	r3, [r7, #4]
 2632 0012 1340     		ands	r3, r3, r2
 2633              		.loc 1 1492 5
 2634 0014 002B     		cmp	r3, #0
 2635 0016 02D0     		beq	.L184
1493:Core/Src/stm32f4xx_flash.c ****   {
1494:Core/Src/stm32f4xx_flash.c ****     bitstatus = SET;
 2636              		.loc 1 1494 15
 2637 0018 0123     		movs	r3, #1
 2638 001a FB73     		strb	r3, [r7, #15]
 2639 001c 01E0     		b	.L185
 2640              	.L184:
1495:Core/Src/stm32f4xx_flash.c ****   }
1496:Core/Src/stm32f4xx_flash.c ****   else
1497:Core/Src/stm32f4xx_flash.c ****   {
1498:Core/Src/stm32f4xx_flash.c ****     bitstatus = RESET;
 2641              		.loc 1 1498 15
 2642 001e 0023     		movs	r3, #0
 2643 0020 FB73     		strb	r3, [r7, #15]
 2644              	.L185:
1499:Core/Src/stm32f4xx_flash.c ****   }
1500:Core/Src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1501:Core/Src/stm32f4xx_flash.c ****   return bitstatus; 
 2645              		.loc 1 1501 10
 2646 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1502:Core/Src/stm32f4xx_flash.c **** }
 2647              		.loc 1 1502 1
 2648 0024 1846     		mov	r0, r3
 2649 0026 1437     		adds	r7, r7, #20
 2650              	.LCFI180:
 2651              		.cfi_def_cfa_offset 4
 2652 0028 BD46     		mov	sp, r7
 2653              	.LCFI181:
 2654              		.cfi_def_cfa_register 13
 2655              		@ sp needed
 2656 002a 5DF8047B 		ldr	r7, [sp], #4
 2657              	.LCFI182:
 2658              		.cfi_restore 7
 2659              		.cfi_def_cfa_offset 0
 2660 002e 7047     		bx	lr
 2661              	.L188:
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 73


 2662              		.align	2
 2663              	.L187:
 2664 0030 003C0240 		.word	1073888256
 2665              		.cfi_endproc
 2666              	.LFE275:
 2668              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 2669              		.align	1
 2670              		.global	FLASH_ClearFlag
 2671              		.syntax unified
 2672              		.thumb
 2673              		.thumb_func
 2675              	FLASH_ClearFlag:
 2676              	.LFB276:
1503:Core/Src/stm32f4xx_flash.c ****  
1504:Core/Src/stm32f4xx_flash.c **** /**
1505:Core/Src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1506:Core/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1507:Core/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1508:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1509:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1510:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1511:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1512:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1513:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1514:Core/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1515:Core/Src/stm32f4xx_flash.c ****   * @retval None
1516:Core/Src/stm32f4xx_flash.c ****   */
1517:Core/Src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1518:Core/Src/stm32f4xx_flash.c **** {
 2677              		.loc 1 1518 1
 2678              		.cfi_startproc
 2679              		@ args = 0, pretend = 0, frame = 8
 2680              		@ frame_needed = 1, uses_anonymous_args = 0
 2681              		@ link register save eliminated.
 2682 0000 80B4     		push	{r7}
 2683              	.LCFI183:
 2684              		.cfi_def_cfa_offset 4
 2685              		.cfi_offset 7, -4
 2686 0002 83B0     		sub	sp, sp, #12
 2687              	.LCFI184:
 2688              		.cfi_def_cfa_offset 16
 2689 0004 00AF     		add	r7, sp, #0
 2690              	.LCFI185:
 2691              		.cfi_def_cfa_register 7
 2692 0006 7860     		str	r0, [r7, #4]
1519:Core/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1520:Core/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1521:Core/Src/stm32f4xx_flash.c ****   
1522:Core/Src/stm32f4xx_flash.c ****   /* Clear the flags */
1523:Core/Src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 2693              		.loc 1 1523 8
 2694 0008 044A     		ldr	r2, .L190
 2695              		.loc 1 1523 13
 2696 000a 7B68     		ldr	r3, [r7, #4]
 2697 000c D360     		str	r3, [r2, #12]
1524:Core/Src/stm32f4xx_flash.c **** }
 2698              		.loc 1 1524 1
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 74


 2699 000e 00BF     		nop
 2700 0010 0C37     		adds	r7, r7, #12
 2701              	.LCFI186:
 2702              		.cfi_def_cfa_offset 4
 2703 0012 BD46     		mov	sp, r7
 2704              	.LCFI187:
 2705              		.cfi_def_cfa_register 13
 2706              		@ sp needed
 2707 0014 5DF8047B 		ldr	r7, [sp], #4
 2708              	.LCFI188:
 2709              		.cfi_restore 7
 2710              		.cfi_def_cfa_offset 0
 2711 0018 7047     		bx	lr
 2712              	.L191:
 2713 001a 00BF     		.align	2
 2714              	.L190:
 2715 001c 003C0240 		.word	1073888256
 2716              		.cfi_endproc
 2717              	.LFE276:
 2719              		.section	.text.FLASH_GetStatus,"ax",%progbits
 2720              		.align	1
 2721              		.global	FLASH_GetStatus
 2722              		.syntax unified
 2723              		.thumb
 2724              		.thumb_func
 2726              	FLASH_GetStatus:
 2727              	.LFB277:
1525:Core/Src/stm32f4xx_flash.c ****  
1526:Core/Src/stm32f4xx_flash.c **** /**
1527:Core/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1528:Core/Src/stm32f4xx_flash.c ****   * @param  None
1529:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
1530:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLE
1531:Core/Src/stm32f4xx_flash.c ****   */
1532:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1533:Core/Src/stm32f4xx_flash.c **** {
 2728              		.loc 1 1533 1
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 8
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732              		@ link register save eliminated.
 2733 0000 80B4     		push	{r7}
 2734              	.LCFI189:
 2735              		.cfi_def_cfa_offset 4
 2736              		.cfi_offset 7, -4
 2737 0002 83B0     		sub	sp, sp, #12
 2738              	.LCFI190:
 2739              		.cfi_def_cfa_offset 16
 2740 0004 00AF     		add	r7, sp, #0
 2741              	.LCFI191:
 2742              		.cfi_def_cfa_register 7
1534:Core/Src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE2;
 2743              		.loc 1 1534 16
 2744 0006 0923     		movs	r3, #9
 2745 0008 FB71     		strb	r3, [r7, #7]
1535:Core/Src/stm32f4xx_flash.c ****   
1536:Core/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 75


 2746              		.loc 1 1536 12
 2747 000a 1B4B     		ldr	r3, .L200
 2748 000c DB68     		ldr	r3, [r3, #12]
 2749              		.loc 1 1536 17
 2750 000e 03F48033 		and	r3, r3, #65536
 2751              		.loc 1 1536 5
 2752 0012 B3F5803F 		cmp	r3, #65536
 2753 0016 02D1     		bne	.L193
1537:Core/Src/stm32f4xx_flash.c ****   {
1538:Core/Src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY2;
 2754              		.loc 1 1538 17
 2755 0018 0123     		movs	r3, #1
 2756 001a FB71     		strb	r3, [r7, #7]
 2757 001c 25E0     		b	.L194
 2758              	.L193:
1539:Core/Src/stm32f4xx_flash.c ****   }
1540:Core/Src/stm32f4xx_flash.c ****   else 
1541:Core/Src/stm32f4xx_flash.c ****   {  
1542:Core/Src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 2759              		.loc 1 1542 14
 2760 001e 164B     		ldr	r3, .L200
 2761 0020 DB68     		ldr	r3, [r3, #12]
 2762              		.loc 1 1542 19
 2763 0022 03F01003 		and	r3, r3, #16
 2764              		.loc 1 1542 7
 2765 0026 002B     		cmp	r3, #0
 2766 0028 02D0     		beq	.L195
1543:Core/Src/stm32f4xx_flash.c ****     { 
1544:Core/Src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP2;
 2767              		.loc 1 1544 19
 2768 002a 0623     		movs	r3, #6
 2769 002c FB71     		strb	r3, [r7, #7]
 2770 002e 1CE0     		b	.L194
 2771              	.L195:
1545:Core/Src/stm32f4xx_flash.c ****     }
1546:Core/Src/stm32f4xx_flash.c ****     else
1547:Core/Src/stm32f4xx_flash.c ****     {
1548:Core/Src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 2772              		.loc 1 1548 16
 2773 0030 114B     		ldr	r3, .L200
 2774 0032 DB68     		ldr	r3, [r3, #12]
 2775              		.loc 1 1548 21
 2776 0034 03F48073 		and	r3, r3, #256
 2777              		.loc 1 1548 9
 2778 0038 002B     		cmp	r3, #0
 2779 003a 02D0     		beq	.L196
1549:Core/Src/stm32f4xx_flash.c ****       { 
1550:Core/Src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD2;
 2780              		.loc 1 1550 21
 2781 003c 0223     		movs	r3, #2
 2782 003e FB71     		strb	r3, [r7, #7]
 2783 0040 13E0     		b	.L194
 2784              	.L196:
1551:Core/Src/stm32f4xx_flash.c ****       } 
1552:Core/Src/stm32f4xx_flash.c ****       else 
1553:Core/Src/stm32f4xx_flash.c ****       {
1554:Core/Src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 76


 2785              		.loc 1 1554 18
 2786 0042 0D4B     		ldr	r3, .L200
 2787 0044 DB68     		ldr	r3, [r3, #12]
 2788              		.loc 1 1554 23
 2789 0046 03F0E003 		and	r3, r3, #224
 2790              		.loc 1 1554 11
 2791 004a 002B     		cmp	r3, #0
 2792 004c 02D0     		beq	.L197
1555:Core/Src/stm32f4xx_flash.c ****         {
1556:Core/Src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM2; 
 2793              		.loc 1 1556 23
 2794 004e 0723     		movs	r3, #7
 2795 0050 FB71     		strb	r3, [r7, #7]
 2796 0052 0AE0     		b	.L194
 2797              	.L197:
1557:Core/Src/stm32f4xx_flash.c ****         }
1558:Core/Src/stm32f4xx_flash.c ****         else
1559:Core/Src/stm32f4xx_flash.c ****         {
1560:Core/Src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 2798              		.loc 1 1560 20
 2799 0054 084B     		ldr	r3, .L200
 2800 0056 DB68     		ldr	r3, [r3, #12]
 2801              		.loc 1 1560 25
 2802 0058 03F00203 		and	r3, r3, #2
 2803              		.loc 1 1560 13
 2804 005c 002B     		cmp	r3, #0
 2805 005e 02D0     		beq	.L198
1561:Core/Src/stm32f4xx_flash.c ****           {
1562:Core/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION2;
 2806              		.loc 1 1562 25
 2807 0060 0823     		movs	r3, #8
 2808 0062 FB71     		strb	r3, [r7, #7]
 2809 0064 01E0     		b	.L194
 2810              	.L198:
1563:Core/Src/stm32f4xx_flash.c ****           }
1564:Core/Src/stm32f4xx_flash.c ****           else
1565:Core/Src/stm32f4xx_flash.c ****           {
1566:Core/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE2;
 2811              		.loc 1 1566 25
 2812 0066 0923     		movs	r3, #9
 2813 0068 FB71     		strb	r3, [r7, #7]
 2814              	.L194:
1567:Core/Src/stm32f4xx_flash.c ****           }
1568:Core/Src/stm32f4xx_flash.c ****         }
1569:Core/Src/stm32f4xx_flash.c ****       }
1570:Core/Src/stm32f4xx_flash.c ****     }
1571:Core/Src/stm32f4xx_flash.c ****   }
1572:Core/Src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1573:Core/Src/stm32f4xx_flash.c ****   return flashstatus;
 2815              		.loc 1 1573 10
 2816 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1574:Core/Src/stm32f4xx_flash.c **** }
 2817              		.loc 1 1574 1
 2818 006c 1846     		mov	r0, r3
 2819 006e 0C37     		adds	r7, r7, #12
 2820              	.LCFI192:
 2821              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 77


 2822 0070 BD46     		mov	sp, r7
 2823              	.LCFI193:
 2824              		.cfi_def_cfa_register 13
 2825              		@ sp needed
 2826 0072 5DF8047B 		ldr	r7, [sp], #4
 2827              	.LCFI194:
 2828              		.cfi_restore 7
 2829              		.cfi_def_cfa_offset 0
 2830 0076 7047     		bx	lr
 2831              	.L201:
 2832              		.align	2
 2833              	.L200:
 2834 0078 003C0240 		.word	1073888256
 2835              		.cfi_endproc
 2836              	.LFE277:
 2838              		.section	.text.FLASH_WaitForLastOperation2,"ax",%progbits
 2839              		.align	1
 2840              		.global	FLASH_WaitForLastOperation2
 2841              		.syntax unified
 2842              		.thumb
 2843              		.thumb_func
 2845              	FLASH_WaitForLastOperation2:
 2846              	.LFB278:
1575:Core/Src/stm32f4xx_flash.c ****  
1576:Core/Src/stm32f4xx_flash.c **** /**
1577:Core/Src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1578:Core/Src/stm32f4xx_flash.c ****   * @param  None
1579:Core/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
1580:Core/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
1581:Core/Src/stm32f4xx_flash.c ****   */
1582:Core/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation2(void)
1583:Core/Src/stm32f4xx_flash.c **** { 
 2847              		.loc 1 1583 1
 2848              		.cfi_startproc
 2849              		@ args = 0, pretend = 0, frame = 8
 2850              		@ frame_needed = 1, uses_anonymous_args = 0
 2851 0000 80B5     		push	{r7, lr}
 2852              	.LCFI195:
 2853              		.cfi_def_cfa_offset 8
 2854              		.cfi_offset 7, -8
 2855              		.cfi_offset 14, -4
 2856 0002 82B0     		sub	sp, sp, #8
 2857              	.LCFI196:
 2858              		.cfi_def_cfa_offset 16
 2859 0004 00AF     		add	r7, sp, #0
 2860              	.LCFI197:
 2861              		.cfi_def_cfa_register 7
1584:Core/Src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE2;
 2862              		.loc 1 1584 21
 2863 0006 0923     		movs	r3, #9
 2864 0008 FB71     		strb	r3, [r7, #7]
1585:Core/Src/stm32f4xx_flash.c ****    
1586:Core/Src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1587:Core/Src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 2865              		.loc 1 1587 12
 2866 000a FFF7FEFF 		bl	FLASH_GetStatus
 2867 000e 0346     		mov	r3, r0
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 78


 2868              		.loc 1 1587 10
 2869 0010 FB71     		strb	r3, [r7, #7]
1588:Core/Src/stm32f4xx_flash.c ****  
1589:Core/Src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1590:Core/Src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1591:Core/Src/stm32f4xx_flash.c ****      flag will be set */
1592:Core/Src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY2)
 2870              		.loc 1 1592 8
 2871 0012 03E0     		b	.L203
 2872              	.L204:
1593:Core/Src/stm32f4xx_flash.c ****   {
1594:Core/Src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 2873              		.loc 1 1594 14
 2874 0014 FFF7FEFF 		bl	FLASH_GetStatus
 2875 0018 0346     		mov	r3, r0
 2876              		.loc 1 1594 12
 2877 001a FB71     		strb	r3, [r7, #7]
 2878              	.L203:
1592:Core/Src/stm32f4xx_flash.c ****   {
 2879              		.loc 1 1592 16
 2880 001c FB79     		ldrb	r3, [r7, #7]
 2881 001e DBB2     		uxtb	r3, r3
1592:Core/Src/stm32f4xx_flash.c ****   {
 2882              		.loc 1 1592 8
 2883 0020 012B     		cmp	r3, #1
 2884 0022 F7D0     		beq	.L204
1595:Core/Src/stm32f4xx_flash.c ****   }
1596:Core/Src/stm32f4xx_flash.c ****   /* Return the operation status */
1597:Core/Src/stm32f4xx_flash.c ****   return status;
 2885              		.loc 1 1597 10
 2886 0024 FB79     		ldrb	r3, [r7, #7]
 2887 0026 DBB2     		uxtb	r3, r3
1598:Core/Src/stm32f4xx_flash.c **** }
 2888              		.loc 1 1598 1
 2889 0028 1846     		mov	r0, r3
 2890 002a 0837     		adds	r7, r7, #8
 2891              	.LCFI198:
 2892              		.cfi_def_cfa_offset 8
 2893 002c BD46     		mov	sp, r7
 2894              	.LCFI199:
 2895              		.cfi_def_cfa_register 13
 2896              		@ sp needed
 2897 002e 80BD     		pop	{r7, pc}
 2898              		.cfi_endproc
 2899              	.LFE278:
 2901              		.text
 2902              	.Letext0:
 2903              		.file 2 "d:\\st\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\machine\\_default
 2904              		.file 3 "d:\\st\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\sys\\_stdint.h"
 2905              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2906              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2907              		.file 6 "Core/Inc/stm32f4xx_flash.h"
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 79


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_flash.c
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:20     .text.FLASH_SetLatency:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:26     .text.FLASH_SetLatency:00000000 FLASH_SetLatency
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:69     .text.FLASH_SetLatency:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:74     .text.FLASH_PrefetchBufferCmd:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:80     .text.FLASH_PrefetchBufferCmd:00000000 FLASH_PrefetchBufferCmd
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:136    .text.FLASH_PrefetchBufferCmd:00000038 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:141    .text.FLASH_InstructionCacheCmd:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:147    .text.FLASH_InstructionCacheCmd:00000000 FLASH_InstructionCacheCmd
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:203    .text.FLASH_InstructionCacheCmd:00000038 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:208    .text.FLASH_DataCacheCmd:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:214    .text.FLASH_DataCacheCmd:00000000 FLASH_DataCacheCmd
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:270    .text.FLASH_DataCacheCmd:00000038 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:275    .text.FLASH_InstructionCacheReset:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:281    .text.FLASH_InstructionCacheReset:00000000 FLASH_InstructionCacheReset
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:315    .text.FLASH_InstructionCacheReset:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:320    .text.FLASH_DataCacheReset:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:326    .text.FLASH_DataCacheReset:00000000 FLASH_DataCacheReset
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:360    .text.FLASH_DataCacheReset:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:365    .text.FLASH_Unlock:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:371    .text.FLASH_Unlock:00000000 FLASH_Unlock
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:416    .text.FLASH_Unlock:00000024 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:423    .text.FLASH_Lock:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:429    .text.FLASH_Lock:00000000 FLASH_Lock
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:463    .text.FLASH_Lock:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:468    .text.FLASH_EraseSector:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:474    .text.FLASH_EraseSector:00000000 FLASH_EraseSector
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2845   .text.FLASH_WaitForLastOperation2:00000000 FLASH_WaitForLastOperation2
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:604    .text.FLASH_EraseSector:000000bc $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:609    .text.FLASH_EraseAllSectors:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:615    .text.FLASH_EraseAllSectors:00000000 FLASH_EraseAllSectors
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:730    .text.FLASH_EraseAllSectors:0000009c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:735    .text.FLASH_EraseAllBank1Sectors:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:741    .text.FLASH_EraseAllBank1Sectors:00000000 FLASH_EraseAllBank1Sectors
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:856    .text.FLASH_EraseAllBank1Sectors:0000009c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:861    .text.FLASH_EraseAllBank2Sectors:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:867    .text.FLASH_EraseAllBank2Sectors:00000000 FLASH_EraseAllBank2Sectors
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:982    .text.FLASH_EraseAllBank2Sectors:0000009c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:987    .text.FLASH_ProgramDoubleWord:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:993    .text.FLASH_ProgramDoubleWord:00000000 FLASH_ProgramDoubleWord
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1072   .text.FLASH_ProgramDoubleWord:0000006c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1077   .text.FLASH_ProgramWord:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1083   .text.FLASH_ProgramWord:00000000 FLASH_ProgramWord
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1162   .text.FLASH_ProgramWord:00000064 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1167   .text.FLASH_ProgramHalfWord:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1173   .text.FLASH_ProgramHalfWord:00000000 FLASH_ProgramHalfWord
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1253   .text.FLASH_ProgramHalfWord:00000068 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1258   .text.FLASH_ProgramByte:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1264   .text.FLASH_ProgramByte:00000000 FLASH_ProgramByte
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1343   .text.FLASH_ProgramByte:00000064 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1348   .text.FLASH_OB_Unlock:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1354   .text.FLASH_OB_Unlock:00000000 FLASH_OB_Unlock
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1401   .text.FLASH_OB_Unlock:00000028 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1408   .text.FLASH_OB_Lock:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1414   .text.FLASH_OB_Lock:00000000 FLASH_OB_Lock
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1448   .text.FLASH_OB_Lock:0000001c $d
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 80


C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1453   .text.FLASH_OB_WRPConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1459   .text.FLASH_OB_WRPConfig:00000000 FLASH_OB_WRPConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1535   .text.FLASH_OB_WRPConfig:00000058 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1540   .text.FLASH_OB_WRP1Config:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1546   .text.FLASH_OB_WRP1Config:00000000 FLASH_OB_WRP1Config
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1622   .text.FLASH_OB_WRP1Config:00000058 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1627   .text.FLASH_OB_PCROPSelectionConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1633   .text.FLASH_OB_PCROPSelectionConfig:00000000 FLASH_OB_PCROPSelectionConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1688   .text.FLASH_OB_PCROPSelectionConfig:00000034 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1693   .text.FLASH_OB_PCROPConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1699   .text.FLASH_OB_PCROPConfig:00000000 FLASH_OB_PCROPConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1775   .text.FLASH_OB_PCROPConfig:00000058 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1780   .text.FLASH_OB_PCROP1Config:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1786   .text.FLASH_OB_PCROP1Config:00000000 FLASH_OB_PCROP1Config
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1862   .text.FLASH_OB_PCROP1Config:00000058 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1867   .text.FLASH_OB_RDPConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1873   .text.FLASH_OB_RDPConfig:00000000 FLASH_OB_RDPConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1922   .text.FLASH_OB_RDPConfig:0000002c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1927   .text.FLASH_OB_UserConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:1933   .text.FLASH_OB_UserConfig:00000000 FLASH_OB_UserConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2007   .text.FLASH_OB_UserConfig:00000054 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2012   .text.FLASH_OB_BootConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2018   .text.FLASH_OB_BootConfig:00000000 FLASH_OB_BootConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2071   .text.FLASH_OB_BootConfig:00000038 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2076   .text.FLASH_OB_BORConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2082   .text.FLASH_OB_BORConfig:00000000 FLASH_OB_BORConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2135   .text.FLASH_OB_BORConfig:00000038 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2140   .text.FLASH_OB_Launch:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2146   .text.FLASH_OB_Launch:00000000 FLASH_OB_Launch
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2193   .text.FLASH_OB_Launch:0000002c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2198   .text.FLASH_OB_GetUser:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2204   .text.FLASH_OB_GetUser:00000000 FLASH_OB_GetUser
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2239   .text.FLASH_OB_GetUser:00000018 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2244   .text.FLASH_OB_GetWRP:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2250   .text.FLASH_OB_GetWRP:00000000 FLASH_OB_GetWRP
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2282   .text.FLASH_OB_GetWRP:00000014 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2287   .text.FLASH_OB_GetWRP1:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2293   .text.FLASH_OB_GetWRP1:00000000 FLASH_OB_GetWRP1
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2325   .text.FLASH_OB_GetWRP1:00000014 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2330   .text.FLASH_OB_GetPCROP:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2336   .text.FLASH_OB_GetPCROP:00000000 FLASH_OB_GetPCROP
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2368   .text.FLASH_OB_GetPCROP:00000014 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2373   .text.FLASH_OB_GetPCROP1:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2379   .text.FLASH_OB_GetPCROP1:00000000 FLASH_OB_GetPCROP1
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2411   .text.FLASH_OB_GetPCROP1:00000014 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2416   .text.FLASH_OB_GetRDP:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2422   .text.FLASH_OB_GetRDP:00000000 FLASH_OB_GetRDP
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2477   .text.FLASH_OB_GetRDP:0000002c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2482   .text.FLASH_OB_GetBOR:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2488   .text.FLASH_OB_GetBOR:00000000 FLASH_OB_GetBOR
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2522   .text.FLASH_OB_GetBOR:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2527   .text.FLASH_ITConfig:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2533   .text.FLASH_ITConfig:00000000 FLASH_ITConfig
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2595   .text.FLASH_ITConfig:0000003c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2600   .text.FLASH_GetFlagStatus:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2606   .text.FLASH_GetFlagStatus:00000000 FLASH_GetFlagStatus
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2664   .text.FLASH_GetFlagStatus:00000030 $d
ARM GAS  C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s 			page 81


C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2669   .text.FLASH_ClearFlag:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2675   .text.FLASH_ClearFlag:00000000 FLASH_ClearFlag
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2715   .text.FLASH_ClearFlag:0000001c $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2720   .text.FLASH_GetStatus:00000000 $t
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2726   .text.FLASH_GetStatus:00000000 FLASH_GetStatus
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2834   .text.FLASH_GetStatus:00000078 $d
C:\Users\16323\AppData\Local\Temp\cc2w9ADY.s:2839   .text.FLASH_WaitForLastOperation2:00000000 $t

NO UNDEFINED SYMBOLS
